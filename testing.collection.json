{
	"info": {
		"_postman_id": "a1b777ae-2145-4c0b-a2bf-d7bbbcc09399",
		"name": "telesim_admin_panel_smoke_API_testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { code } = pm.response",
									"",
									"if (code === 200) {",
									"    // add tokens to collection variables",
									"    const { data: { token, refreshToken }} = pm.response.json();",
									"    pm.collectionVariables.set(\"token\", token);",
									"    pm.collectionVariables.set(\"refresh\", refreshToken);",
									"",
									"    // add email and password to collection variables",
									"    const { email, password } = JSON.parse(pm.request.body.raw);",
									"    pm.collectionVariables.set(\"email\", email);",
									"    pm.collectionVariables.set(\"password\", password);",
									"}",
									"",
									"// status ok, format is JSON",
									"pm.test(\"Status is ok, response is json\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// request is public",
									"pm.test(\"Request is Public\", function () {",
									"    pm.expect(pm.request.to.not.have.header(\"Authorization\"));",
									"});",
									"",
									"// succes is true",
									"pm.test(\"Check success is true\", () => { ",
									"    pm.expect(pm.response.json().success).to.equal(true); ",
									"});",
									"",
									"// check keys in response",
									"var data = JSON.parse(responseBody);",
									"tests[\"Status code is 1\"] = data.status.code === 1;",
									"tests['Response has ID'] = responseBody.has('id');",
									"tests['Response has Full Name'] = responseBody.has('fullName');",
									"tests['Response has Email'] = responseBody.has('email');",
									"tests['Response has image'] = responseBody.has('image');",
									"tests['Response has VOIP Packages'] = responseBody.has('voipPackages');",
									"tests['Response has balance'] = responseBody.has('balance');",
									"tests['Response has amount'] = responseBody.has('amount');",
									"tests['Response has locale'] = responseBody.has('locale');",
									"tests['Response has token'] = responseBody.has('token');",
									"tests['Response has refreshToken'] = responseBody.has('refreshToken');",
									"tests['Response has type'] = responseBody.has('type');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"client\": \"web\",\n    \"device\": \"Chrome 86.0.4240.111\",\n    \"email\": \"{{loginEmail}}\",\n    \"password\": \"{{loginPassword}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "User info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status ok, format is JSON",
									"pm.test(\"Status is ok, response is json\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// request is public",
									"pm.test(\"Request is not Public\", function () {",
									"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
									"});",
									"",
									"// check keys in response",
									"var data = JSON.parse(responseBody);",
									"tests['Response has Full Name'] = responseBody.has('fullName');",
									"tests['Response has Email'] = responseBody.has('email');",
									"tests['Response has image'] = responseBody.has('image');",
									"tests['Response has VOIP Packages'] = responseBody.has('voipPackages');",
									"tests['Response has balance'] = responseBody.has('balance');",
									"tests['Response has ID'] = responseBody.has('id');",
									"tests['Response has amount'] = responseBody.has('amount');",
									"tests['Response has locale'] = responseBody.has('locale');",
									"tests['Response has type'] = responseBody.has('type');",
									"",
									"// check values",
									"userEmail = pm.environment.get(\"loginEmail\");",
									"tests[\"Email value is correct\"] = data.email === userEmail;",
									"",
									"// add tokens to enviroment variables",
									"const { code } = pm.response",
									"if (code === 200) {",
									"    const { fullName } = pm.response.json();",
									"    pm.environment.set(\"putFullNameOld\", fullName);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MywiYWNjZXNzSW1hZ2UiOiI5MWNiOTlmNC05MzIwLTQ4MTEtYTM3Yi1jMzgxYzg4ZWZiNTciLCJyb2xlSWQiOjEsImlhdCI6MTYxNTM1ODkxNSwiZXhwIjoxNjE1MzYyNTE1fQ.kfoFOtKXkwjpGzp_rDMN_AVSxcvDP74V9OvIkg1m59s"
							}
						],
						"url": {
							"raw": "{{host}}/users/get",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"get"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status ok, format is JSON",
									"pm.test(\"Status is ok, response is json\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// request is public",
									"pm.test(\"Request is not Public\", function () {",
									"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
									"});",
									"",
									"// succes is true",
									"pm.test(\"Check success is true\", () => { ",
									"    pm.expect(pm.response.json().success).to.equal(true); ",
									"});",
									"",
									"// check keys in response",
									"var data = JSON.parse(responseBody);",
									"tests[\"Status code is 1\"] = data.status.code === 1;",
									"tests['Response has Full Name'] = responseBody.has('fullName');",
									"tests['Response has Email'] = responseBody.has('email');",
									"tests['Response has image'] = responseBody.has('image');",
									"tests['Response has balance'] = responseBody.has('balance');",
									"tests['Response has ID'] = responseBody.has('id');",
									"tests['Response has amount'] = responseBody.has('amount');",
									"tests['Response has type'] = responseBody.has('type');",
									"",
									"// check change data and equality",
									"var req = JSON.parse(pm.request.body.raw);",
									"pm.environment.set(\"newFullName\", req.fullName);",
									"putFullNameOld = pm.environment.get(\"putFullNameOld\");",
									"newFullName = pm.environment.get(\"newFullName\");",
									"tests[\"Full name value is correct changed\"] = data.data.fullName === newFullName;",
									"pm.test(\"New Full name is not equal old one\", () => { ",
									"    pm.expect(pm.response.json().data.fullName).to.not.equal(putFullNameOld); ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MywiYWNjZXNzSW1hZ2UiOiI5MWNiOTlmNC05MzIwLTQ4MTEtYTM3Yi1jMzgxYzg4ZWZiNTciLCJyb2xlSWQiOjEsImlhdCI6MTYxNTM1ODkxNSwiZXhwIjoxNjE1MzYyNTE1fQ.kfoFOtKXkwjpGzp_rDMN_AVSxcvDP74V9OvIkg1m59s"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"fullName\":\"{{putFullName}}\"}"
						},
						"url": {
							"raw": "{{host}}/users/edit",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"edit"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "User controller",
			"item": [
				{
					"name": "Add new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status ok, format is JSON",
									"pm.test(\"Status is ok, response is json\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// request is public",
									"pm.test(\"Request is not Public\", function () {",
									"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
									"});",
									"",
									"// check keys in response",
									"var data = JSON.parse(responseBody);",
									"tests['Response has ID'] = responseBody.has('id');",
									"tests['Response has accessImage'] = responseBody.has('accessImage');",
									"tests['Response has roleId'] = responseBody.has('roleId');",
									"tests[\"User roleId is 3\"] = data.roleId === 3;",
									"",
									"// save user id",
									"const { id } = pm.response.json();",
									"pm.environment.set(\"newUserId\", id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "authority",
								"value": "telesim.dunice-testing.com"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not\"A\\Brand\";v=\"99\""
							},
							{
								"key": "accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MywiYWNjZXNzSW1hZ2UiOiIxZmFkZDIzMS1mY2JkLTRhMmQtOTI3Ni1jNGFhYmFjNzk5NjAiLCJyb2xlSWQiOjEsImlhdCI6MTYxNjA2OTU2MSwiZXhwIjoxNjE2MDczMTYxfQ.B54PJZ_93CQY2HT6biUL3il86HcoDdSIt5c-GYGl9_E"
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?1"
							},
							{
								"key": "user-agent",
								"value": "Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Mobile Safari/537.36"
							},
							{
								"key": "content-type",
								"value": "application/json;charset=UTF-8"
							},
							{
								"key": "origin",
								"value": "https://telesim.dunice-testing.com"
							},
							{
								"key": "sec-fetch-site",
								"value": "same-origin"
							},
							{
								"key": "sec-fetch-mode",
								"value": "cors"
							},
							{
								"key": "sec-fetch-dest",
								"value": "empty"
							},
							{
								"key": "referer",
								"value": "https://telesim.dunice-testing.com/staff/users/list/user"
							},
							{
								"key": "accept-language",
								"value": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7"
							},
							{
								"key": "cookie",
								"value": "__stripe_mid=022acea0-71f7-472a-a175-86129de77e1286d738; G_ENABLED_IDPS=google; _ym_uid=1606920384323878833; _ym_d=1606920384; __stripe_sid=78cea3e8-a7bb-4e17-b7d0-b5180de47e50b4bbdc"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"fullName\":\"{{putFullName}}\",\"password\":\"QWEqwe123\",\"email\":\"{{addEmail}}\", \"type\":\"user\"}"
						},
						"url": {
							"raw": "{{host}}/users/add",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add new admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status ok, format is JSON",
									"pm.test(\"Status is ok, response is json\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// request is public",
									"pm.test(\"Request is not Public\", function () {",
									"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
									"});",
									"",
									"// check keys in response",
									"var data = JSON.parse(responseBody);",
									"tests['Response has ID'] = responseBody.has('id');",
									"tests['Response has accessImage'] = responseBody.has('accessImage');",
									"tests['Response has roleId'] = responseBody.has('roleId');",
									"tests[\"User roleId is 2\"] = data.roleId === 2;",
									"",
									"// save user id",
									"const { id } = pm.response.json();",
									"pm.environment.set(\"newAdminId\", id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "authority",
								"value": "telesim.dunice-testing.com"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not\"A\\Brand\";v=\"99\""
							},
							{
								"key": "accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MywiYWNjZXNzSW1hZ2UiOiIxZmFkZDIzMS1mY2JkLTRhMmQtOTI3Ni1jNGFhYmFjNzk5NjAiLCJyb2xlSWQiOjEsImlhdCI6MTYxNjA2OTU2MSwiZXhwIjoxNjE2MDczMTYxfQ.B54PJZ_93CQY2HT6biUL3il86HcoDdSIt5c-GYGl9_E"
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?1"
							},
							{
								"key": "user-agent",
								"value": "Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Mobile Safari/537.36"
							},
							{
								"key": "content-type",
								"value": "application/json;charset=UTF-8"
							},
							{
								"key": "origin",
								"value": "https://telesim.dunice-testing.com"
							},
							{
								"key": "sec-fetch-site",
								"value": "same-origin"
							},
							{
								"key": "sec-fetch-mode",
								"value": "cors"
							},
							{
								"key": "sec-fetch-dest",
								"value": "empty"
							},
							{
								"key": "referer",
								"value": "https://telesim.dunice-testing.com/staff/users/list/user"
							},
							{
								"key": "accept-language",
								"value": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7"
							},
							{
								"key": "cookie",
								"value": "__stripe_mid=022acea0-71f7-472a-a175-86129de77e1286d738; G_ENABLED_IDPS=google; _ym_uid=1606920384323878833; _ym_d=1606920384; __stripe_sid=78cea3e8-a7bb-4e17-b7d0-b5180de47e50b4bbdc"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"fullName\":\"{{putFullName}}\",\"password\":\"QWEqwe123\",\"email\":\"{{addEmail}}\", \"type\":\"operator\"}"
						},
						"url": {
							"raw": "{{host}}/users/add",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add new operator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status ok, format is JSON",
									"pm.test(\"Status is ok, response is json\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// request is public",
									"pm.test(\"Request is not Public\", function () {",
									"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
									"});",
									"",
									"// check keys in response",
									"var data = JSON.parse(responseBody);",
									"tests['Response has ID'] = responseBody.has('id');",
									"tests['Response has accessImage'] = responseBody.has('accessImage');",
									"tests['Response has roleId'] = responseBody.has('roleId');",
									"tests[\"User roleId is 2\"] = data.roleId === 2;",
									"",
									"// save user id",
									"const { id } = pm.response.json();",
									"pm.environment.set(\"newOperatorId\", id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "authority",
								"value": "telesim.dunice-testing.com"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not\"A\\Brand\";v=\"99\""
							},
							{
								"key": "accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MywiYWNjZXNzSW1hZ2UiOiIxZmFkZDIzMS1mY2JkLTRhMmQtOTI3Ni1jNGFhYmFjNzk5NjAiLCJyb2xlSWQiOjEsImlhdCI6MTYxNjA2OTU2MSwiZXhwIjoxNjE2MDczMTYxfQ.B54PJZ_93CQY2HT6biUL3il86HcoDdSIt5c-GYGl9_E"
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?1"
							},
							{
								"key": "user-agent",
								"value": "Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Mobile Safari/537.36"
							},
							{
								"key": "content-type",
								"value": "application/json;charset=UTF-8"
							},
							{
								"key": "origin",
								"value": "https://telesim.dunice-testing.com"
							},
							{
								"key": "sec-fetch-site",
								"value": "same-origin"
							},
							{
								"key": "sec-fetch-mode",
								"value": "cors"
							},
							{
								"key": "sec-fetch-dest",
								"value": "empty"
							},
							{
								"key": "referer",
								"value": "https://telesim.dunice-testing.com/staff/users/list/user"
							},
							{
								"key": "accept-language",
								"value": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7"
							},
							{
								"key": "cookie",
								"value": "__stripe_mid=022acea0-71f7-472a-a175-86129de77e1286d738; G_ENABLED_IDPS=google; _ym_uid=1606920384323878833; _ym_d=1606920384; __stripe_sid=78cea3e8-a7bb-4e17-b7d0-b5180de47e50b4bbdc"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"fullName\":\"{{putFullName}}\",\"password\":\"QWEqwe123\",\"email\":\"{{addEmail}}\", \"type\":\"operator\"}"
						},
						"url": {
							"raw": "{{host}}/users/add",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Block user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status ok, format is JSON",
									"pm.test(\"Status is ok, response is json\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// request is public",
									"pm.test(\"Request is not Public\", function () {",
									"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
									"});",
									"",
									"// succes is true",
									"pm.test(\"Check success is true\", () => { ",
									"    pm.expect(pm.response.json().success).to.equal(true); ",
									"});",
									"",
									"// check keys in response",
									"var data = JSON.parse(responseBody);",
									"tests[\"Status code is 1\"] = data.status?.code === 1;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiYWNjZXNzSW1hZ2UiOiJjMDE2YjRiYy0zMTY5LTQxZGYtYmQ3Mi1lYWM0MWU3Y2I4MDYiLCJyb2xlSWQiOjEsImlhdCI6MTYxNTM2NDUxOCwiZXhwIjoxNjE1MzY4MTE4fQ.RxhGsJ8RPikjpMwUnAS8dLCUXRDucoiFbq3wSa5pmvA"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"blocked\":true}"
						},
						"url": {
							"raw": "{{host}}/users/block/{{newUserId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"block",
								"{{newUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status ok, format is JSON",
									"pm.test(\"Status is ok, response is json\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// request is public",
									"pm.test(\"Request is not Public\", function () {",
									"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
									"});",
									"",
									"// succes is true",
									"pm.test(\"Check success is true\", () => { ",
									"    pm.expect(pm.response.json().success).to.equal(true); ",
									"});",
									"",
									"// check keys in response",
									"var data = JSON.parse(responseBody);",
									"tests[\"Status code is 1\"] = data.status?.code === 1;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiYWNjZXNzSW1hZ2UiOiJjMDE2YjRiYy0zMTY5LTQxZGYtYmQ3Mi1lYWM0MWU3Y2I4MDYiLCJyb2xlSWQiOjEsImlhdCI6MTYxNTM2NDUxOCwiZXhwIjoxNjE1MzY4MTE4fQ.RxhGsJ8RPikjpMwUnAS8dLCUXRDucoiFbq3wSa5pmvA"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"emailVerified\":true}"
						},
						"url": {
							"raw": "{{host}}/users/verify/{{newUserId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"verify",
								"{{newUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status ok, format is JSON",
									"pm.test(\"Status is ok, response is json\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// request is public",
									"pm.test(\"Request is not Public\", function () {",
									"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
									"});",
									"",
									"// succes is true",
									"pm.test(\"Check success is true\", () => { ",
									"    pm.expect(pm.response.json().success).to.equal(true); ",
									"});",
									"",
									"// check keys in response",
									"var data = JSON.parse(responseBody);",
									"tests[\"Status code is 1\"] = data.status?.code === 1;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiYWNjZXNzSW1hZ2UiOiJjMDE2YjRiYy0zMTY5LTQxZGYtYmQ3Mi1lYWM0MWU3Y2I4MDYiLCJyb2xlSWQiOjEsImlhdCI6MTYxNTM2NDUxOCwiZXhwIjoxNjE1MzY4MTE4fQ.RxhGsJ8RPikjpMwUnAS8dLCUXRDucoiFbq3wSa5pmvA"
							}
						],
						"url": {
							"raw": "{{host}}/users/remove/{{newUserId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"remove",
								"{{newUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status ok, format is JSON",
									"pm.test(\"Status is ok, response is json\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// request is public",
									"pm.test(\"Request is not Public\", function () {",
									"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
									"});",
									"",
									"// succes is true",
									"pm.test(\"Check success is true\", () => { ",
									"    pm.expect(pm.response.json().success).to.equal(true); ",
									"});",
									"",
									"// check keys in response",
									"var data = JSON.parse(responseBody);",
									"tests[\"Status code is 1\"] = data.status?.code === 1;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiYWNjZXNzSW1hZ2UiOiJjMDE2YjRiYy0zMTY5LTQxZGYtYmQ3Mi1lYWM0MWU3Y2I4MDYiLCJyb2xlSWQiOjEsImlhdCI6MTYxNTM2NDUxOCwiZXhwIjoxNjE1MzY4MTE4fQ.RxhGsJ8RPikjpMwUnAS8dLCUXRDucoiFbq3wSa5pmvA"
							}
						],
						"url": {
							"raw": "{{host}}/users/remove/{{newAdminId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"remove",
								"{{newAdminId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete operator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status ok, format is JSON",
									"pm.test(\"Status is ok, response is json\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// request is public",
									"pm.test(\"Request is not Public\", function () {",
									"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
									"});",
									"",
									"// succes is true",
									"pm.test(\"Check success is true\", () => { ",
									"    pm.expect(pm.response.json().success).to.equal(true); ",
									"});",
									"",
									"// check keys in response",
									"var data = JSON.parse(responseBody);",
									"tests[\"Status code is 1\"] = data.status?.code === 1;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiYWNjZXNzSW1hZ2UiOiJjMDE2YjRiYy0zMTY5LTQxZGYtYmQ3Mi1lYWM0MWU3Y2I4MDYiLCJyb2xlSWQiOjEsImlhdCI6MTYxNTM2NDUxOCwiZXhwIjoxNjE1MzY4MTE4fQ.RxhGsJ8RPikjpMwUnAS8dLCUXRDucoiFbq3wSa5pmvA"
							}
						],
						"url": {
							"raw": "{{host}}/users/remove/{{newOperatorId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"remove",
								"{{newOperatorId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "eSIM Directory",
			"item": [
				{
					"name": "Get plans",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status ok, format is JSON",
									"pm.test(\"Status is ok, response is json\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// request is public",
									"pm.test(\"Request is not Public\", function () {",
									"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
									"});",
									"",
									"// succes is true",
									"pm.test(\"Check success is true\", () => { ",
									"    pm.expect(pm.response.json().success).to.equal(true); ",
									"});",
									"",
									"// check keys in response",
									"var data = JSON.parse(responseBody);",
									"tests[\"Status code is 1\"] = data.status.code === 1;",
									"tests['Response has ID'] = responseBody.has('id');",
									"tests['Response has name'] = responseBody.has('name');",
									"tests['Response has planType'] = responseBody.has('planType');",
									"tests['Response has description'] = responseBody.has('description');",
									"tests['Response has active'] = responseBody.has('active');",
									"tests['Response has icon1'] = responseBody.has('icon1');",
									"tests['Response has icon2'] = responseBody.has('icon2');",
									"tests['Response has packages'] = responseBody.has('packages');",
									"",
									"// save plans",
									"searchedPlan1 = \"Tourist\"",
									"const planObject1 = data.data?.find(({ name }) => name === searchedPlan1);",
									"pm.environment.set(\"touristPlanID\", planObject1.id);",
									"pm.environment.set(\"planTouristStatus\", planObject1.active);",
									"",
									"searchedPlan2 = \"Tourist+\"",
									"const planObject2 = data.data?.find(({ name }) => name === searchedPlan2);",
									"pm.environment.set(\"touristPlusPlanID\", planObject2.id);",
									"pm.environment.set(\"planTouristPlusStatus\", planObject2.active);",
									"",
									"searchedPlan3 = \"Business\"",
									"const planObject3 = data.data?.find(({ name }) => name === searchedPlan3);",
									"pm.environment.set(\"businessPlanID\", planObject3.id);",
									"pm.environment.set(\"planBusinessStatus\", planObject3.active);",
									"",
									"// save active plans",
									"touristPlan = pm.environment.get(\"planTouristStatus\");",
									"touristPlusPlan = pm.environment.get(\"planTouristPlusStatus\");",
									"businessPlan = pm.environment.get(\"planBusinessStatus\");",
									"if (touristPlan == true){",
									"    pm.environment.set(\"activePlan\", planObject1.id);",
									"} else if (touristPlusPlan == true) {",
									"    pm.environment.set(\"activePlan\", planObject2.id);",
									"} else if (businessPlan == true) {",
									"    pm.environment.set(\"activePlan\", planObject3.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiYWNjZXNzSW1hZ2UiOiI1NTJjYjVhOC0xOTgyLTRjODItOTJkYi0xMTg5MmIyNTk0YjkiLCJyb2xlSWQiOjEsImlhdCI6MTYxNTUzMjQ1MSwiZXhwIjoxNjE1NTM2MDUxfQ.VR1-WXxZu0uZd7bH5pOOzjgJ_nHlH9Zga_mtaHmi0Ns"
							}
						],
						"url": {
							"raw": "{{host}}/esim-directory/plans",
							"host": [
								"{{host}}"
							],
							"path": [
								"esim-directory",
								"plans"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get validity types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status ok, format is JSON",
									"pm.test(\"Status is ok, response is json\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// request is public",
									"pm.test(\"Request is not Public\", function () {",
									"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
									"});",
									"",
									"// succes is true",
									"pm.test(\"Check success is true\", () => { ",
									"    pm.expect(pm.response.json().success).to.equal(true); ",
									"});",
									"",
									"// check keys in response",
									"var data = JSON.parse(responseBody);",
									"tests[\"Status code is 1\"] = data.status.code === 1;",
									"tests['Response has ID'] = responseBody.has('id');",
									"tests['Response has title'] = responseBody.has('title');",
									"tests['Response has period'] = responseBody.has('period');",
									"tests['Response has active'] = responseBody.has('active');",
									"tests['Response has packages'] = responseBody.has('packages');",
									"",
									"// save validity types",
									"searchedValidity1 = \"24 hours\"",
									"const validityObject1 = data.data?.find(({ title }) => title === searchedValidity1);",
									"pm.environment.set(\"24hoursValidity\", validityObject1.id);",
									"pm.environment.set(\"24hoursValidityStatus\", validityObject1.active);",
									"",
									"searchedValidity2 = \"3 days\"",
									"const validityObject2 = data.data?.find(({ title }) => title === searchedValidity2);",
									"pm.environment.set(\"3daysValidity\", validityObject2.id);",
									"pm.environment.set(\"3daysValidityStatus\", validityObject2.active);",
									"",
									"searchedValidity3 = \"30 days\"",
									"const validityObject3 = data.data?.find(({ title }) => title === searchedValidity3);",
									"pm.environment.set(\"30daysValidity\", validityObject3.id);",
									"pm.environment.set(\"30daysValidityStatus\", validityObject3.active);",
									"",
									"searchedValidity4 = \"5 days\"",
									"const validityObject4 = data.data?.find(({ title }) => title === searchedValidity4);",
									"pm.environment.set(\"5daysValidity\", validityObject4.id);",
									"pm.environment.set(\"5daysValidityStatus\", validityObject4.active);",
									"",
									"searchedValidity5 = \"7 days\"",
									"const validityObject5 = data.data?.find(({ title }) => title === searchedValidity5);",
									"pm.environment.set(\"7daysValidity\", validityObject5.id);",
									"pm.environment.set(\"7daysValidityStatus\", validityObject5.active);",
									"",
									"searchedValidity6 = \"365 days\"",
									"const validityObject6 = data.data?.find(({ title }) => title === searchedValidity6);",
									"pm.environment.set(\"365daysValidity\", validityObject6.id);",
									"pm.environment.set(\"365daysValidityStatus\", validityObject6.active);",
									"",
									"// save active plans",
									"twentyFourHours = pm.environment.get(\"24hoursValidityStatus\");",
									"threeDays = pm.environment.get(\"3daysValidityStatus\");",
									"thirtyDays = pm.environment.get(\"30daysValidityStatus\");",
									"fiveDays = pm.environment.get(\"5daysValidityStatus\");",
									"sevenDays = pm.environment.get(\"7daysValidityStatus\");",
									"year = pm.environment.get(\"365daysValidityStatus\");",
									"if (twentyFourHours == true){",
									"    pm.environment.set(\"activeValidity\", validityObject1.id);",
									"} else if (threeDays == true) {",
									"    pm.environment.set(\"activeValidity\", validityObject2.id);",
									"} else if (thirtyDays == true) {",
									"    pm.environment.set(\"activeValidity\", validityObject3.id);",
									"} else if (fiveDays == true) {",
									"    pm.environment.set(\"activeValidity\", validityObject4.id);",
									"} else if (sevenDays == true) {",
									"    pm.environment.set(\"activeValidity\", validityObject5.id);",
									"} else if (year == true) {",
									"    pm.environment.set(\"activeValidity\", validityObject6.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiYWNjZXNzSW1hZ2UiOiI1NTJjYjVhOC0xOTgyLTRjODItOTJkYi0xMTg5MmIyNTk0YjkiLCJyb2xlSWQiOjEsImlhdCI6MTYxNTUzMjQ1MSwiZXhwIjoxNjE1NTM2MDUxfQ.VR1-WXxZu0uZd7bH5pOOzjgJ_nHlH9Zga_mtaHmi0Ns"
							}
						],
						"url": {
							"raw": "{{host}}/esim-directory/validity-types",
							"host": [
								"{{host}}"
							],
							"path": [
								"esim-directory",
								"validity-types"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get data types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status ok, format is JSON",
									"pm.test(\"Status is ok, response is json\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// request is public",
									"pm.test(\"Request is not Public\", function () {",
									"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
									"});",
									"",
									"// succes is true",
									"pm.test(\"Check success is true\", () => { ",
									"    pm.expect(pm.response.json().success).to.equal(true); ",
									"});",
									"",
									"// check keys in response",
									"var data = JSON.parse(responseBody);",
									"tests[\"Status code is 1\"] = data.status.code === 1;",
									"tests['Response has ID'] = responseBody.has('id');",
									"tests['Response has title'] = responseBody.has('title');",
									"tests['Response has key'] = responseBody.has('key');",
									"tests['Response has active'] = responseBody.has('active');",
									"tests['Response has packages'] = responseBody.has('packages');",
									"",
									"// save data types",
									"searchedType1 = \"DATA only\"",
									"const typeObject1 = data.data?.find(({ title }) => title === searchedType1);",
									"pm.environment.set(\"dataOnlyType\", typeObject1.id);",
									"pm.environment.set(\"dataOnlyTypeStatus\", typeObject1.active);",
									"",
									"searchedType2 = \"eSIM with number\"",
									"const typeObject2 = data.data?.find(({ title }) => title === searchedType2);",
									"pm.environment.set(\"esimWithNumberType\", typeObject2.id);",
									"pm.environment.set(\"esimWithNumberTypeStatus\", typeObject2.active);",
									"",
									"// save data type",
									"dataOnly = pm.environment.get(\"dataOnlyTypeStatus\");",
									"esimWithNumber = pm.environment.get(\"esimWithNumberTypeStatus\");",
									"if (dataOnly == true){",
									"    pm.environment.set(\"activeDataType\", typeObject1.id);",
									"} else if (esimWithNumber == true) {",
									"    pm.environment.set(\"activeDataType\", typeObject2.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiYWNjZXNzSW1hZ2UiOiI1NTJjYjVhOC0xOTgyLTRjODItOTJkYi0xMTg5MmIyNTk0YjkiLCJyb2xlSWQiOjEsImlhdCI6MTYxNTUzMjQ1MSwiZXhwIjoxNjE1NTM2MDUxfQ.VR1-WXxZu0uZd7bH5pOOzjgJ_nHlH9Zga_mtaHmi0Ns"
							}
						],
						"url": {
							"raw": "{{host}}/esim-directory/data-types",
							"host": [
								"{{host}}"
							],
							"path": [
								"esim-directory",
								"data-types"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get purchase types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status ok, format is JSON",
									"pm.test(\"Status is ok, response is json\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// request is public",
									"pm.test(\"Request is not Public\", function () {",
									"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
									"});",
									"",
									"// succes is true",
									"pm.test(\"Check success is true\", () => { ",
									"    pm.expect(pm.response.json().success).to.equal(true); ",
									"});",
									"",
									"// check keys in response",
									"var data = JSON.parse(responseBody);",
									"tests[\"Status code is 1\"] = data.status.code === 1;",
									"tests['Response has ID'] = responseBody.has('id');",
									"tests['Response has title'] = responseBody.has('title');",
									"tests['Response has key'] = responseBody.has('key');",
									"tests['Response has active'] = responseBody.has('active');",
									"tests['Response has packages'] = responseBody.has('packages');",
									"",
									"// save purchase types",
									"searchedType1 = \"Prepaid\";",
									"const typeObject1 = data.data?.find(({ title }) => title === searchedType1);",
									"pm.environment.set(\"prepaidType\", typeObject1.id);",
									"pm.environment.set(\"typePrepaidStatus\", typeObject1.active);",
									"",
									"searchedType2 = \"Subscription\";",
									"const typeObject2 = data.data?.find(({ title }) => title === searchedType2);",
									"pm.environment.set(\"subscriptionType\", typeObject2.id);",
									"pm.environment.set(\"typeSubscriptionStatus\", typeObject2.active);",
									"",
									"// save active purchase type",
									"prepaidStatus = pm.environment.get(\"typePrepaidStatus\");",
									"subscriptionStatus = pm.environment.get(\"typeSubscriptionStatus\");",
									"if (prepaidStatus == true){",
									"    pm.environment.set(\"activePurchaseType\", typeObject1.id);",
									"} else if (subscriptionStatus == true) {",
									"    pm.environment.set(\"activePurchaseType\", typeObject2.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiYWNjZXNzSW1hZ2UiOiI1NTJjYjVhOC0xOTgyLTRjODItOTJkYi0xMTg5MmIyNTk0YjkiLCJyb2xlSWQiOjEsImlhdCI6MTYxNTUzMjQ1MSwiZXhwIjoxNjE1NTM2MDUxfQ.VR1-WXxZu0uZd7bH5pOOzjgJ_nHlH9Zga_mtaHmi0Ns"
							}
						],
						"url": {
							"raw": "{{host}}/esim-directory/purchase-types",
							"host": [
								"{{host}}"
							],
							"path": [
								"esim-directory",
								"purchase-types"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get network generation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status ok, format is JSON",
									"pm.test(\"Status is ok, response is json\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// request is public",
									"pm.test(\"Request is not Public\", function () {",
									"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
									"});",
									"",
									"// succes is true",
									"pm.test(\"Check success is true\", () => { ",
									"    pm.expect(pm.response.json().success).to.equal(true); ",
									"});",
									"",
									"// check keys in response",
									"var data = JSON.parse(responseBody);",
									"tests[\"Status code is 1\"] = data.status.code === 1;",
									"tests['Response has ID'] = responseBody.has('id');",
									"tests['Response has title'] = responseBody.has('title');",
									"tests['Response has key'] = responseBody.has('key');",
									"tests['Response has active'] = responseBody.has('active');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiYWNjZXNzSW1hZ2UiOiI1NTJjYjVhOC0xOTgyLTRjODItOTJkYi0xMTg5MmIyNTk0YjkiLCJyb2xlSWQiOjEsImlhdCI6MTYxNTUzMjQ1MSwiZXhwIjoxNjE1NTM2MDUxfQ.VR1-WXxZu0uZd7bH5pOOzjgJ_nHlH9Zga_mtaHmi0Ns"
							}
						],
						"url": {
							"raw": "{{host}}/esim-directory/network-gen",
							"host": [
								"{{host}}"
							],
							"path": [
								"esim-directory",
								"network-gen"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get active network generation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status ok, format is JSON",
									"pm.test(\"Status is ok, response is json\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// request is public",
									"pm.test(\"Request is not Public\", function () {",
									"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
									"});",
									"",
									"// succes is true",
									"pm.test(\"Check success is true\", () => { ",
									"    pm.expect(pm.response.json().success).to.equal(true); ",
									"});",
									"",
									"// check keys in response",
									"var data = JSON.parse(responseBody);",
									"tests[\"Status code is 1\"] = data.status.code === 1;",
									"tests['Response has ID'] = responseBody.has('id');",
									"tests['Response has title'] = responseBody.has('title');",
									"tests['Response has key'] = responseBody.has('key');",
									"tests['Response has active'] = responseBody.has('active');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiYWNjZXNzSW1hZ2UiOiI1NTJjYjVhOC0xOTgyLTRjODItOTJkYi0xMTg5MmIyNTk0YjkiLCJyb2xlSWQiOjEsImlhdCI6MTYxNTUzMjQ1MSwiZXhwIjoxNjE1NTM2MDUxfQ.VR1-WXxZu0uZd7bH5pOOzjgJ_nHlH9Zga_mtaHmi0Ns"
							}
						],
						"url": {
							"raw": "{{host}}/esim-directory/network-gen/active",
							"host": [
								"{{host}}"
							],
							"path": [
								"esim-directory",
								"network-gen",
								"active"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Locations",
			"item": [
				{
					"name": "All countries for save their id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get and save random id of all",
									"var data = JSON.parse(responseBody);",
									"const countryObject = data.results.filter(({active}) => active === true);",
									"const allIdArray = [];",
									"countryObject.forEach(({ id }) => allIdArray.push(id));",
									"",
									"const randomIndexId1 = Math.floor(Math.random() * (allIdArray.length + 1));",
									"const randomId1 = allIdArray[randomIndexId1];",
									"pm.environment.set(\"countryIdForCreate1\", randomId1);",
									"",
									"const randomIndexId2 = Math.floor(Math.random() * (allIdArray.length + 1));",
									"const randomId2 = allIdArray[randomIndexId2];",
									"pm.environment.set(\"countryIdForCreate2\", randomId2);",
									"",
									"const randomIndexId3 = Math.floor(Math.random() * (allIdArray.length + 1));",
									"const randomId3 = allIdArray[randomIndexId3];",
									"pm.environment.set(\"countryIdForCreate3\", randomId3);",
									"",
									"const randomIndexId4 = Math.floor(Math.random() * (allIdArray.length + 1));",
									"const randomId4 = allIdArray[randomIndexId4];",
									"pm.environment.set(\"countryIdForCreate4\", randomId4);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiYWNjZXNzSW1hZ2UiOiIyZmJlNmM5YS00ZGFiLTQyOTItODU5OS0yY2Q4YjgwODAyNTYiLCJyb2xlSWQiOjEsImlhdCI6MTYxNTk2Nzg3NCwiZXhwIjoxNjE1OTcxNDc0fQ.GrIWYP9rW45uMkNpJc0wTXjnp2NZ3t6wYaciYXZqnoI"
							}
						],
						"url": {
							"raw": "{{host}}/locations/countries?perPage=1000",
							"host": [
								"{{host}}"
							],
							"path": [
								"locations",
								"countries"
							],
							"query": [
								{
									"key": "perPage",
									"value": "1000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create country",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// add name and isoCode to variables",
									"const { name, isoCode } = JSON.parse(pm.request.body.raw);",
									"pm.environment.set(\"saveLocationCountryName\", name);",
									"pm.environment.set(\"saveCountryIsoCode\", isoCode);",
									"",
									"// status ok, format is JSON",
									"pm.test(\"Status is ok, response is json\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// request is public",
									"pm.test(\"Request is not Public\", function () {",
									"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
									"});",
									"",
									"// succes is true",
									"pm.test(\"Check success is true\", () => { ",
									"    pm.expect(pm.response.json().success).to.equal(true); ",
									"});",
									"",
									"// check keys in response",
									"var data = JSON.parse(responseBody);",
									"tests[\"Status code is 1\"] = data.status?.code === 1;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "authority",
								"value": "telesim.dunice-testing.com"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not\"A\\Brand\";v=\"99\""
							},
							{
								"key": "accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MywiYWNjZXNzSW1hZ2UiOiJlZjFhZDllMi0wZmUzLTQ4YTItOWI2NS04ODIzMjRiMTVkMTEiLCJyb2xlSWQiOjEsImlhdCI6MTYxNTk3MTA3MywiZXhwIjoxNjE1OTc0NjczfQ.aoGgybjCdPF-Qfj0WUapBAcJU9PPhlfXN45XEb73KzE"
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?1"
							},
							{
								"key": "user-agent",
								"value": "Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Mobile Safari/537.36"
							},
							{
								"key": "content-type",
								"value": "application/json;charset=UTF-8"
							},
							{
								"key": "origin",
								"value": "https://telesim.dunice-testing.com"
							},
							{
								"key": "sec-fetch-site",
								"value": "same-origin"
							},
							{
								"key": "sec-fetch-mode",
								"value": "cors"
							},
							{
								"key": "sec-fetch-dest",
								"value": "empty"
							},
							{
								"key": "referer",
								"value": "https://telesim.dunice-testing.com/staff/locations"
							},
							{
								"key": "accept-language",
								"value": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7"
							},
							{
								"key": "cookie",
								"value": "__stripe_mid=022acea0-71f7-472a-a175-86129de77e1286d738; G_ENABLED_IDPS=google; _ym_uid=1606920384323878833; _ym_d=1606920384; __stripe_sid=6b2bd32c-69ad-4b8e-9516-c89b576720a5a00fd4"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"active\":true,\"name\":\"{{locationCountryName}}\",\"isoCode\":\"{{CountryIsoCode}}\"}"
						},
						"url": {
							"raw": "{{host}}/locations/country",
							"host": [
								"{{host}}"
							],
							"path": [
								"locations",
								"country"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create region",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const regionNameArr = [\"TeleSIM - Tourist 1GB\",",
									"\"TeleSIM - Tourist 5GB\",",
									"\"TeleSIM - Israel 1GB\",",
									"\"TeleSIM - Tourist 1GB - 30 days\",",
									"\"TeleSIM - USA - 1GB/50MIN/25SMS\",",
									"\"TeleSIM - USA - 3GB/100MIN/50SMS\",",
									"\"TeleSIM - USA - 5GB/250MIN/100SMS\",",
									"\"TeleSIM - Europe 1GB - 30Days\",",
									"\"TeleSIM - Worldwide 3GB - 30Days\",",
									"\"Telesim - ZoneA - 0.5GB\",",
									"\"Telesim - ZoneA - 1GB\",",
									"\"Telesim - ZoneA - 3GB\",",
									"\"Telesim - ZoneA - 5GB\",",
									"\"Telesim - ZoneA - 10GB\",",
									"\"Telesim - ZoneA - 15GB\",",
									"\"Telesim - ZoneA - 20GB\",",
									"\"Telesim - ZoneB - 0.5GB\",",
									"\"Telesim - ZoneB - 1GB\",",
									"\"Telesim - ZoneB - 3GB\",",
									"\"Telesim - ZoneB - 5GB\",",
									"\"Telesim - ZoneB - 10GB\",",
									"\"Telesim - ZoneB - 15GB\",",
									"\"Telesim - ZoneB - 20GB\",",
									"\"Telesim - ZoneC - 0.5GB\",",
									"\"Telesim - ZoneC - 1GB\",",
									"\"Telesim - ZoneC - 3GB\",",
									"\"Telesim - ZoneC - 5GB\",",
									"\"Telesim - ZoneC - 10GB\",",
									"\"Telesim - ZoneC - 15GB\",",
									"\"Telesim - ZoneC - 20GB\",",
									"\"Telesim - ZoneD - 0.5GB\",",
									"\"Telesim - ZoneD - 1GB\",",
									"\"Telesim - ZoneD - 3GB\",",
									"\"Telesim - ZoneD - 5GB\",",
									"\"Telesim - ZoneD - 10GB\",",
									"\"Telesim - ZoneD - 15GB\",",
									"\"Telesim - ZoneD - 20GB\",",
									"\"Telesim - ZoneE - 0.5GB\",",
									"\"Telesim - ZoneE - 1GB\",",
									"\"Telesim - ZoneE - 3GB\",",
									"\"Telesim - ZoneE - 5GB\",",
									"\"Telesim - ZoneE - 10GB\",",
									"\"Telesim - ZoneE - 15GB\",",
									"\"Telesim - ZoneF - 0.5GB\",",
									"\"Telesim - ZoneF - 1GB\",",
									"\"Telesim - ZoneF - 3GB\",",
									"\"Telesim - ZoneF - 5GB\",",
									"\"Telesim - ZoneF - 10GB\",",
									"\"Telesim - ZoneF - 15GB\",",
									"\"Telesim - ZoneG - 0.5GB\",",
									"\"Telesim - ZoneG - 1GB\",",
									"\"Telesim - ZoneG - 3GB\",",
									"\"Telesim - ZoneG - 5GB\",",
									"\"Telesim - ZoneG - 10GB\",",
									"\"Telesim - ZoneH - 0.5GB\",",
									"\"Telesim - ZoneH - 1GB\",",
									"\"Telesim - ZoneH - 3GB\",",
									"\"Telesim - ZoneH - 5GB\",",
									"\"Telesim - ZoneI - 0.5GB\",",
									"\"Telesim - ZoneI - 1GB\",",
									"\"Telesim - ZoneI - 3GB\",",
									"\"Telesim - ZoneI - 5GB\",",
									"\"Telesim - ZoneJ - 0.5GB\",",
									"\"Telesim - ZoneJ - 1GB\",",
									"\"Telesim - ZoneJ - 3GB\",",
									"\"Telesim - ZoneJ - 5GB\",",
									"\"Telesim - ZoneK - 0.5GB\",",
									"\"Telesim - ZoneK - 1GB\",",
									"\"Telesim - ZoneK - 3GB\",",
									"\"Telesim - ZoneK - 5GB\",",
									"\"Telesim - ZoneL - 1GB\",",
									"\"Telesim - ZoneL - 3GB\",",
									"\"Telesim - ZoneM - 1GB\",",
									"\"Telesim - ZoneM - 3GB\",",
									"\"Telesim - ZoneN - 1GB\",",
									"\"Telesim - ZoneO - 1GB\",",
									"\"Telesim - ZoneP - 1GB\"];",
									"",
									"const random = Math.floor(Math.random() * regionNameArr.length);",
									"pm.environment.set(\"locationRegionName\", regionNameArr[random].split(' - ')[1]);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// add name to variables",
									"const { name } = JSON.parse(pm.request.body.raw);",
									"pm.environment.set(\"saveLocationRegionName\", name);",
									"",
									"// status ok, format is JSON",
									"pm.test(\"Status is ok, response is json\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// request is public",
									"pm.test(\"Request is not Public\", function () {",
									"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
									"});",
									"",
									"// succes is true",
									"pm.test(\"Check success is true\", () => { ",
									"    pm.expect(pm.response.json().success).to.equal(true); ",
									"});",
									"",
									"// check keys in response",
									"var data = JSON.parse(responseBody);",
									"tests[\"Status code is 1\"] = data.status?.code === 1;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "authority",
								"value": "telesim.dunice-testing.com"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not\"A\\Brand\";v=\"99\""
							},
							{
								"key": "accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MywiYWNjZXNzSW1hZ2UiOiJlZjFhZDllMi0wZmUzLTQ4YTItOWI2NS04ODIzMjRiMTVkMTEiLCJyb2xlSWQiOjEsImlhdCI6MTYxNTk3MTA3MywiZXhwIjoxNjE1OTc0NjczfQ.aoGgybjCdPF-Qfj0WUapBAcJU9PPhlfXN45XEb73KzE"
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?1"
							},
							{
								"key": "user-agent",
								"value": "Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Mobile Safari/537.36"
							},
							{
								"key": "content-type",
								"value": "application/json;charset=UTF-8"
							},
							{
								"key": "origin",
								"value": "https://telesim.dunice-testing.com"
							},
							{
								"key": "sec-fetch-site",
								"value": "same-origin"
							},
							{
								"key": "sec-fetch-mode",
								"value": "cors"
							},
							{
								"key": "sec-fetch-dest",
								"value": "empty"
							},
							{
								"key": "referer",
								"value": "https://telesim.dunice-testing.com/staff/locations"
							},
							{
								"key": "accept-language",
								"value": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7"
							},
							{
								"key": "cookie",
								"value": "__stripe_mid=022acea0-71f7-472a-a175-86129de77e1286d738; G_ENABLED_IDPS=google; _ym_uid=1606920384323878833; _ym_d=1606920384; __stripe_sid=6b2bd32c-69ad-4b8e-9516-c89b576720a5a00fd4"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"active\":true,\"name\":\"{{locationRegionName}}\",\"changedLocations\":{\"changeList\":[{\"id\":{{countryIdForCreate1}},\"action\":\"enable\"},{\"id\":{{countryIdForCreate2}},\"action\":\"enable\"}],\"locationChildType\":\"countries\",\"locationParentType\":\"region\"}}"
						},
						"url": {
							"raw": "{{host}}/locations/region",
							"host": [
								"{{host}}"
							],
							"path": [
								"locations",
								"region"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create subregion",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const subregionNameArr = [\"TeleSIM - Tourist 1GB\",",
									"\"TeleSIM - Tourist 5GB\",",
									"\"TeleSIM - Israel 1GB\",",
									"\"TeleSIM - Tourist 1GB - 30 days\",",
									"\"TeleSIM - USA - 1GB/50MIN/25SMS\",",
									"\"TeleSIM - USA - 3GB/100MIN/50SMS\",",
									"\"TeleSIM - USA - 5GB/250MIN/100SMS\",",
									"\"TeleSIM - Europe 1GB - 30Days\",",
									"\"TeleSIM - Worldwide 3GB - 30Days\",",
									"\"Telesim - ZoneA - 0.5GB\",",
									"\"Telesim - ZoneA - 1GB\",",
									"\"Telesim - ZoneA - 3GB\",",
									"\"Telesim - ZoneA - 5GB\",",
									"\"Telesim - ZoneA - 10GB\",",
									"\"Telesim - ZoneA - 15GB\",",
									"\"Telesim - ZoneA - 20GB\",",
									"\"Telesim - ZoneB - 0.5GB\",",
									"\"Telesim - ZoneB - 1GB\",",
									"\"Telesim - ZoneB - 3GB\",",
									"\"Telesim - ZoneB - 5GB\",",
									"\"Telesim - ZoneB - 10GB\",",
									"\"Telesim - ZoneB - 15GB\",",
									"\"Telesim - ZoneB - 20GB\",",
									"\"Telesim - ZoneC - 0.5GB\",",
									"\"Telesim - ZoneC - 1GB\",",
									"\"Telesim - ZoneC - 3GB\",",
									"\"Telesim - ZoneC - 5GB\",",
									"\"Telesim - ZoneC - 10GB\",",
									"\"Telesim - ZoneC - 15GB\",",
									"\"Telesim - ZoneC - 20GB\",",
									"\"Telesim - ZoneD - 0.5GB\",",
									"\"Telesim - ZoneD - 1GB\",",
									"\"Telesim - ZoneD - 3GB\",",
									"\"Telesim - ZoneD - 5GB\",",
									"\"Telesim - ZoneD - 10GB\",",
									"\"Telesim - ZoneD - 15GB\",",
									"\"Telesim - ZoneD - 20GB\",",
									"\"Telesim - ZoneE - 0.5GB\",",
									"\"Telesim - ZoneE - 1GB\",",
									"\"Telesim - ZoneE - 3GB\",",
									"\"Telesim - ZoneE - 5GB\",",
									"\"Telesim - ZoneE - 10GB\",",
									"\"Telesim - ZoneE - 15GB\",",
									"\"Telesim - ZoneF - 0.5GB\",",
									"\"Telesim - ZoneF - 1GB\",",
									"\"Telesim - ZoneF - 3GB\",",
									"\"Telesim - ZoneF - 5GB\",",
									"\"Telesim - ZoneF - 10GB\",",
									"\"Telesim - ZoneF - 15GB\",",
									"\"Telesim - ZoneG - 0.5GB\",",
									"\"Telesim - ZoneG - 1GB\",",
									"\"Telesim - ZoneG - 3GB\",",
									"\"Telesim - ZoneG - 5GB\",",
									"\"Telesim - ZoneG - 10GB\",",
									"\"Telesim - ZoneH - 0.5GB\",",
									"\"Telesim - ZoneH - 1GB\",",
									"\"Telesim - ZoneH - 3GB\",",
									"\"Telesim - ZoneH - 5GB\",",
									"\"Telesim - ZoneI - 0.5GB\",",
									"\"Telesim - ZoneI - 1GB\",",
									"\"Telesim - ZoneI - 3GB\",",
									"\"Telesim - ZoneI - 5GB\",",
									"\"Telesim - ZoneJ - 0.5GB\",",
									"\"Telesim - ZoneJ - 1GB\",",
									"\"Telesim - ZoneJ - 3GB\",",
									"\"Telesim - ZoneJ - 5GB\",",
									"\"Telesim - ZoneK - 0.5GB\",",
									"\"Telesim - ZoneK - 1GB\",",
									"\"Telesim - ZoneK - 3GB\",",
									"\"Telesim - ZoneK - 5GB\",",
									"\"Telesim - ZoneL - 1GB\",",
									"\"Telesim - ZoneL - 3GB\",",
									"\"Telesim - ZoneM - 1GB\",",
									"\"Telesim - ZoneM - 3GB\",",
									"\"Telesim - ZoneN - 1GB\",",
									"\"Telesim - ZoneO - 1GB\",",
									"\"Telesim - ZoneP - 1GB\"];",
									"",
									"const random = Math.floor(Math.random() * subregionNameArr.length);",
									"pm.environment.set(\"locationSubregionName\", subregionNameArr[random].split(' - ')[1]);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// add name and to variables",
									"const { name } = JSON.parse(pm.request.body.raw);",
									"pm.environment.set(\"saveLocationSubregionName\", name);",
									"",
									"// status ok, format is JSON",
									"pm.test(\"Status is ok, response is json\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// request is public",
									"pm.test(\"Request is not Public\", function () {",
									"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
									"});",
									"",
									"// succes is true",
									"pm.test(\"Check success is true\", () => { ",
									"    pm.expect(pm.response.json().success).to.equal(true); ",
									"});",
									"",
									"// check keys in response",
									"var data = JSON.parse(responseBody);",
									"tests[\"Status code is 1\"] = data.status?.code === 1;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "authority",
								"value": "telesim.dunice-testing.com"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not\"A\\Brand\";v=\"99\""
							},
							{
								"key": "accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MywiYWNjZXNzSW1hZ2UiOiJlZjFhZDllMi0wZmUzLTQ4YTItOWI2NS04ODIzMjRiMTVkMTEiLCJyb2xlSWQiOjEsImlhdCI6MTYxNTk3MTA3MywiZXhwIjoxNjE1OTc0NjczfQ.aoGgybjCdPF-Qfj0WUapBAcJU9PPhlfXN45XEb73KzE"
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?1"
							},
							{
								"key": "user-agent",
								"value": "Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Mobile Safari/537.36"
							},
							{
								"key": "content-type",
								"value": "application/json;charset=UTF-8"
							},
							{
								"key": "origin",
								"value": "https://telesim.dunice-testing.com"
							},
							{
								"key": "sec-fetch-site",
								"value": "same-origin"
							},
							{
								"key": "sec-fetch-mode",
								"value": "cors"
							},
							{
								"key": "sec-fetch-dest",
								"value": "empty"
							},
							{
								"key": "referer",
								"value": "https://telesim.dunice-testing.com/staff/locations"
							},
							{
								"key": "accept-language",
								"value": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7"
							},
							{
								"key": "cookie",
								"value": "__stripe_mid=022acea0-71f7-472a-a175-86129de77e1286d738; G_ENABLED_IDPS=google; _ym_uid=1606920384323878833; _ym_d=1606920384; __stripe_sid=6b2bd32c-69ad-4b8e-9516-c89b576720a5a00fd4"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"active\":true,\"name\":\"{{locationSubregionName}}\",\"changedLocations\":{\"changeList\":[{\"id\":{{countryIdForCreate3}},\"action\":\"enable\"},{\"id\":{{countryIdForCreate4}},\"action\":\"enable\"}],\"locationChildType\":\"countries\",\"locationParentType\":\"subregion\"}}"
						},
						"url": {
							"raw": "{{host}}/locations/subregion",
							"host": [
								"{{host}}"
							],
							"path": [
								"locations",
								"subregion"
							]
						}
					},
					"response": []
				},
				{
					"name": "All countries",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status ok, format is JSON",
									"pm.test(\"Status is ok, response is json\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// request is public",
									"pm.test(\"Request is not Public\", function () {",
									"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
									"});",
									"",
									"// check keys in response",
									"var data = JSON.parse(responseBody);",
									"tests['Response has results'] = responseBody.has('results');",
									"tests['Response has ID'] = responseBody.has('id');",
									"tests['Response has Country Name'] = responseBody.has('name');",
									"tests['Response has isoCode'] = responseBody.has('isoCode');",
									"tests['Response has icon'] = responseBody.has('icon');",
									"tests['Response has smallImage'] = responseBody.has('smallImage');",
									"tests['Response has bigImage'] = responseBody.has('bigImage');",
									"tests['Response has secondaryBigImage'] = responseBody.has('secondaryBigImage');",
									"tests['Response has active'] = responseBody.has('active');",
									"tests['Response has createdAt'] = responseBody.has('createdAt');",
									"tests['Response has zoneId'] = responseBody.has('zoneId');",
									"",
									"// check values",
									"countryName = pm.environment.get(\"saveLocationCountryName\");",
									"isoCode = pm.environment.get(\"saveCountryIsoCode\");",
									"searchNewCountry = pm.environment.get(\"saveLocationCountryName\");",
									"const countryObject = data.results.find(({ name }) => name === searchNewCountry);",
									"pm.environment.set(\"newCountryId\", countryObject.id);",
									"",
									"tests[\"Created country with new name is exist\"] = countryObject.name === countryName;",
									"tests[\"Created country with new isoCode is exist\"] = countryObject.isoCode === isoCode;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiYWNjZXNzSW1hZ2UiOiIyZmJlNmM5YS00ZGFiLTQyOTItODU5OS0yY2Q4YjgwODAyNTYiLCJyb2xlSWQiOjEsImlhdCI6MTYxNTk2Nzg3NCwiZXhwIjoxNjE1OTcxNDc0fQ.GrIWYP9rW45uMkNpJc0wTXjnp2NZ3t6wYaciYXZqnoI"
							}
						],
						"url": {
							"raw": "{{host}}/locations/countries?perPage=1000",
							"host": [
								"{{host}}"
							],
							"path": [
								"locations",
								"countries"
							],
							"query": [
								{
									"key": "perPage",
									"value": "1000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "All regions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status ok, format is JSON",
									"pm.test(\"Status is ok, response is json\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// request is public",
									"pm.test(\"Request is not Public\", function () {",
									"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
									"});",
									"",
									"// check keys in response",
									"var data = JSON.parse(responseBody);",
									"tests['Response has results'] = responseBody.has('results');",
									"tests['Response has ID'] = responseBody.has('id');",
									"tests['Response has Country Name'] = responseBody.has('name');",
									"tests['Response has icon'] = responseBody.has('icon');",
									"tests['Response has smallImage'] = responseBody.has('smallImage');",
									"tests['Response has bigImage'] = responseBody.has('bigImage');",
									"tests['Response has active'] = responseBody.has('active');",
									"tests['Response has createdAt'] = responseBody.has('createdAt');",
									"",
									"// check values",
									"regionName = pm.environment.get(\"saveLocationRegionName\");",
									"searchNewRegion = pm.environment.get(\"saveLocationRegionName\");",
									"const regionObject = data.results.find(({ name }) => name === searchNewRegion);",
									"pm.environment.set(\"newRegiodId\", regionObject.id);",
									"",
									"tests[\"Created region with new name is exist\"] = regionObject.name === regionName;",
									"",
									"// save product ID",
									"regionName = pm.environment.get(\"saveLocationRegionName\");",
									"const regionForCompare = {",
									"\"30962\":\"TeleSIM - Tourist 1GB\",",
									"\"30980\":\"TeleSIM - Tourist 5GB\",",
									"\"31569\":\"TeleSIM - Israel 1GB\",",
									"\"31570\":\"TeleSIM - Tourist 1GB - 30 days\",",
									"\"31571\":\"TeleSIM - USA - 1GB/50MIN/25SMS\",",
									"\"31572\":\"TeleSIM - USA - 3GB/100MIN/50SMS\",",
									"\"31573\":\"TeleSIM - USA - 5GB/250MIN/100SMS\",",
									"\"31904\":\"TeleSIM - Europe 1GB - 30Days\",",
									"\"31907\":\"TeleSIM - Worldwide 3GB - 30Days\",",
									"\"32036\":\"Telesim - ZoneA - 0.5GB\",",
									"\"32037\":\"Telesim - ZoneA - 1GB\",",
									"\"32038\":\"Telesim - ZoneA - 3GB\",",
									"\"32039\":\"Telesim - ZoneA - 5GB\",",
									"\"32040\":\"Telesim - ZoneA - 10GB\",",
									"\"32041\":\"Telesim - ZoneA - 15GB\",",
									"\"32042\":\"Telesim - ZoneA - 20GB\",",
									"\"32043\":\"Telesim - ZoneB - 0.5GB\",",
									"\"32044\":\"Telesim - ZoneB - 1GB\",",
									"\"32045\":\"Telesim - ZoneB - 3GB\",",
									"\"32046\":\"Telesim - ZoneB - 5GB\",",
									"\"32047\":\"Telesim - ZoneB - 10GB\",",
									"\"32048\":\"Telesim - ZoneB - 15GB\",",
									"\"32049\":\"Telesim - ZoneB - 20GB\",",
									"\"32050\":\"Telesim - ZoneC - 0.5GB\",",
									"\"32051\":\"Telesim - ZoneC - 1GB\",",
									"\"32052\":\"Telesim - ZoneC - 3GB\",",
									"\"32053\":\"Telesim - ZoneC - 5GB\",",
									"\"32054\":\"Telesim - ZoneC - 10GB\",",
									"\"32055\":\"Telesim - ZoneC - 15GB\",",
									"\"32056\":\"Telesim - ZoneC - 20GB\",",
									"\"32057\":\"Telesim - ZoneD - 0.5GB\",",
									"\"32058\":\"Telesim - ZoneD - 1GB\",",
									"\"32059\":\"Telesim - ZoneD - 3GB\",",
									"\"32060\":\"Telesim - ZoneD - 5GB\",",
									"\"32061\":\"Telesim - ZoneD - 10GB\",",
									"\"32062\":\"Telesim - ZoneD - 15GB\",",
									"\"32063\":\"Telesim - ZoneD - 20GB\",",
									"\"32064\":\"Telesim - ZoneE - 0.5GB\",",
									"\"32065\":\"Telesim - ZoneE - 1GB\",",
									"\"32066\":\"Telesim - ZoneE - 3GB\",",
									"\"32067\":\"Telesim - ZoneE - 5GB\",",
									"\"32068\":\"Telesim - ZoneE - 10GB\",",
									"\"32069\":\"Telesim - ZoneE - 15GB\",",
									"\"32070\":\"Telesim - ZoneF - 0.5GB\",",
									"\"32071\":\"Telesim - ZoneF - 1GB\",",
									"\"32072\":\"Telesim - ZoneF - 3GB\",",
									"\"32073\":\"Telesim - ZoneF - 5GB\",",
									"\"32074\":\"Telesim - ZoneF - 10GB\",",
									"\"32075\":\"Telesim - ZoneF - 15GB\",",
									"\"32076\":\"Telesim - ZoneG - 0.5GB\",",
									"\"32077\":\"Telesim - ZoneG - 1GB\",",
									"\"32078\":\"Telesim - ZoneG - 3GB\",",
									"\"32079\":\"Telesim - ZoneG - 5GB\",",
									"\"32080\":\"Telesim - ZoneG - 10GB\",",
									"\"32081\":\"Telesim - ZoneH - 0.5GB\",",
									"\"32082\":\"Telesim - ZoneH - 1GB\",",
									"\"32083\":\"Telesim - ZoneH - 3GB\",",
									"\"32084\":\"Telesim - ZoneH - 5GB\",",
									"\"32085\":\"Telesim - ZoneI - 0.5GB\",",
									"\"32086\":\"Telesim - ZoneI - 1GB\",",
									"\"32087\":\"Telesim - ZoneI - 3GB\",",
									"\"32088\":\"Telesim - ZoneI - 5GB\",",
									"\"32089\":\"Telesim - ZoneJ - 0.5GB\",",
									"\"32090\":\"Telesim - ZoneJ - 1GB\",",
									"\"32091\":\"Telesim - ZoneJ - 3GB\",",
									"\"32092\":\"Telesim - ZoneJ - 5GB\",",
									"\"32093\":\"Telesim - ZoneK - 0.5GB\",",
									"\"32094\":\"Telesim - ZoneK - 1GB\",",
									"\"32095\":\"Telesim - ZoneK - 3GB\",",
									"\"32096\":\"Telesim - ZoneK - 5GB\",",
									"\"32097\":\"Telesim - ZoneL - 1GB\",",
									"\"32098\":\"Telesim - ZoneL - 3GB\",",
									"\"32099\":\"Telesim - ZoneM - 1GB\",",
									"\"32100\":\"Telesim - ZoneM - 3GB\",",
									"\"32101\":\"Telesim - ZoneN - 1GB\",",
									"\"32102\":\"Telesim - ZoneO - 1GB\",",
									"\"32103\":\"Telesim - ZoneP - 1GB\"",
									"}",
									"",
									"const arrayZone = Object.entries(regionForCompare).find(([key, value]) => value.includes(regionName)) || [null , null];",
									"pm.environment.set(\"regionProductId\", arrayZone[0]);",
									"",
									"searchNewRegion = pm.environment.get(\"saveLocationRegionName\");",
									"const regionForIdObject = data.results.find(({ name }) => name === searchNewRegion);",
									"pm.environment.set(\"newRegionId\", regionForIdObject.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiYWNjZXNzSW1hZ2UiOiIyZmJlNmM5YS00ZGFiLTQyOTItODU5OS0yY2Q4YjgwODAyNTYiLCJyb2xlSWQiOjEsImlhdCI6MTYxNTk2Nzg3NCwiZXhwIjoxNjE1OTcxNDc0fQ.GrIWYP9rW45uMkNpJc0wTXjnp2NZ3t6wYaciYXZqnoI"
							}
						],
						"url": {
							"raw": "{{host}}/locations/regions?perPage=1000",
							"host": [
								"{{host}}"
							],
							"path": [
								"locations",
								"regions"
							],
							"query": [
								{
									"key": "perPage",
									"value": "1000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "All subregions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status ok, format is JSON",
									"pm.test(\"Status is ok, response is json\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// request is public",
									"pm.test(\"Request is not Public\", function () {",
									"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
									"});",
									"",
									"// check keys in response",
									"var data = JSON.parse(responseBody);",
									"tests['Response has results'] = responseBody.has('results');",
									"tests['Response has ID'] = responseBody.has('id');",
									"tests['Response has Country Name'] = responseBody.has('name');",
									"tests['Response has icon'] = responseBody.has('icon');",
									"tests['Response has smallImage'] = responseBody.has('smallImage');",
									"tests['Response has bigImage'] = responseBody.has('bigImage');",
									"tests['Response has active'] = responseBody.has('active');",
									"tests['Response has createdAt'] = responseBody.has('createdAt');",
									"",
									"// check values",
									"subregionName = pm.environment.get(\"saveLocationSubregionName\");",
									"searchNewSubregion = pm.environment.get(\"saveLocationSubregionName\");",
									"const subregionObject = data.results.find(({ name }) => name === searchNewSubregion);",
									"pm.environment.set(\"newSubregionId\", subregionObject.id);",
									"",
									"tests[\"Created subregion with new name is exist\"] = subregionObject.name === subregionName;",
									"",
									"// save product ID",
									"subregionName = pm.environment.get(\"saveLocationSubregionName\");",
									"const subregionForCompare = {",
									"\"30962\":\"TeleSIM - Tourist 1GB\",",
									"\"30980\":\"TeleSIM - Tourist 5GB\",",
									"\"31569\":\"TeleSIM - Israel 1GB\",",
									"\"31570\":\"TeleSIM - Tourist 1GB - 30 days\",",
									"\"31571\":\"TeleSIM - USA - 1GB/50MIN/25SMS\",",
									"\"31572\":\"TeleSIM - USA - 3GB/100MIN/50SMS\",",
									"\"31573\":\"TeleSIM - USA - 5GB/250MIN/100SMS\",",
									"\"31904\":\"TeleSIM - Europe 1GB - 30Days\",",
									"\"31907\":\"TeleSIM - Worldwide 3GB - 30Days\",",
									"\"32036\":\"Telesim - ZoneA - 0.5GB\",",
									"\"32037\":\"Telesim - ZoneA - 1GB\",",
									"\"32038\":\"Telesim - ZoneA - 3GB\",",
									"\"32039\":\"Telesim - ZoneA - 5GB\",",
									"\"32040\":\"Telesim - ZoneA - 10GB\",",
									"\"32041\":\"Telesim - ZoneA - 15GB\",",
									"\"32042\":\"Telesim - ZoneA - 20GB\",",
									"\"32043\":\"Telesim - ZoneB - 0.5GB\",",
									"\"32044\":\"Telesim - ZoneB - 1GB\",",
									"\"32045\":\"Telesim - ZoneB - 3GB\",",
									"\"32046\":\"Telesim - ZoneB - 5GB\",",
									"\"32047\":\"Telesim - ZoneB - 10GB\",",
									"\"32048\":\"Telesim - ZoneB - 15GB\",",
									"\"32049\":\"Telesim - ZoneB - 20GB\",",
									"\"32050\":\"Telesim - ZoneC - 0.5GB\",",
									"\"32051\":\"Telesim - ZoneC - 1GB\",",
									"\"32052\":\"Telesim - ZoneC - 3GB\",",
									"\"32053\":\"Telesim - ZoneC - 5GB\",",
									"\"32054\":\"Telesim - ZoneC - 10GB\",",
									"\"32055\":\"Telesim - ZoneC - 15GB\",",
									"\"32056\":\"Telesim - ZoneC - 20GB\",",
									"\"32057\":\"Telesim - ZoneD - 0.5GB\",",
									"\"32058\":\"Telesim - ZoneD - 1GB\",",
									"\"32059\":\"Telesim - ZoneD - 3GB\",",
									"\"32060\":\"Telesim - ZoneD - 5GB\",",
									"\"32061\":\"Telesim - ZoneD - 10GB\",",
									"\"32062\":\"Telesim - ZoneD - 15GB\",",
									"\"32063\":\"Telesim - ZoneD - 20GB\",",
									"\"32064\":\"Telesim - ZoneE - 0.5GB\",",
									"\"32065\":\"Telesim - ZoneE - 1GB\",",
									"\"32066\":\"Telesim - ZoneE - 3GB\",",
									"\"32067\":\"Telesim - ZoneE - 5GB\",",
									"\"32068\":\"Telesim - ZoneE - 10GB\",",
									"\"32069\":\"Telesim - ZoneE - 15GB\",",
									"\"32070\":\"Telesim - ZoneF - 0.5GB\",",
									"\"32071\":\"Telesim - ZoneF - 1GB\",",
									"\"32072\":\"Telesim - ZoneF - 3GB\",",
									"\"32073\":\"Telesim - ZoneF - 5GB\",",
									"\"32074\":\"Telesim - ZoneF - 10GB\",",
									"\"32075\":\"Telesim - ZoneF - 15GB\",",
									"\"32076\":\"Telesim - ZoneG - 0.5GB\",",
									"\"32077\":\"Telesim - ZoneG - 1GB\",",
									"\"32078\":\"Telesim - ZoneG - 3GB\",",
									"\"32079\":\"Telesim - ZoneG - 5GB\",",
									"\"32080\":\"Telesim - ZoneG - 10GB\",",
									"\"32081\":\"Telesim - ZoneH - 0.5GB\",",
									"\"32082\":\"Telesim - ZoneH - 1GB\",",
									"\"32083\":\"Telesim - ZoneH - 3GB\",",
									"\"32084\":\"Telesim - ZoneH - 5GB\",",
									"\"32085\":\"Telesim - ZoneI - 0.5GB\",",
									"\"32086\":\"Telesim - ZoneI - 1GB\",",
									"\"32087\":\"Telesim - ZoneI - 3GB\",",
									"\"32088\":\"Telesim - ZoneI - 5GB\",",
									"\"32089\":\"Telesim - ZoneJ - 0.5GB\",",
									"\"32090\":\"Telesim - ZoneJ - 1GB\",",
									"\"32091\":\"Telesim - ZoneJ - 3GB\",",
									"\"32092\":\"Telesim - ZoneJ - 5GB\",",
									"\"32093\":\"Telesim - ZoneK - 0.5GB\",",
									"\"32094\":\"Telesim - ZoneK - 1GB\",",
									"\"32095\":\"Telesim - ZoneK - 3GB\",",
									"\"32096\":\"Telesim - ZoneK - 5GB\",",
									"\"32097\":\"Telesim - ZoneL - 1GB\",",
									"\"32098\":\"Telesim - ZoneL - 3GB\",",
									"\"32099\":\"Telesim - ZoneM - 1GB\",",
									"\"32100\":\"Telesim - ZoneM - 3GB\",",
									"\"32101\":\"Telesim - ZoneN - 1GB\",",
									"\"32102\":\"Telesim - ZoneO - 1GB\",",
									"\"32103\":\"Telesim - ZoneP - 1GB\"",
									"}",
									"",
									"const arrayZone = Object.entries(subregionForCompare).find(([key, value]) => value.includes(subregionName)) || [null , null];",
									"pm.environment.set(\"subregionProductId\", arrayZone[0]);",
									"",
									"searchNewSubregion = pm.environment.get(\"saveLocationSubregionName\");",
									"const subregionForIdObject = data.results.find(({ name }) => name === searchNewSubregion);",
									"pm.environment.set(\"newSubregionId\", subregionForIdObject.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiYWNjZXNzSW1hZ2UiOiIyZmJlNmM5YS00ZGFiLTQyOTItODU5OS0yY2Q4YjgwODAyNTYiLCJyb2xlSWQiOjEsImlhdCI6MTYxNTk2Nzg3NCwiZXhwIjoxNjE1OTcxNDc0fQ.GrIWYP9rW45uMkNpJc0wTXjnp2NZ3t6wYaciYXZqnoI"
							}
						],
						"url": {
							"raw": "{{host}}/locations/subregions?perPage=1000",
							"host": [
								"{{host}}"
							],
							"path": [
								"locations",
								"subregions"
							],
							"query": [
								{
									"key": "perPage",
									"value": "1000"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Packages/eSIM controller",
			"item": [
				{
					"name": "Get countries",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status ok, format is JSON",
									"pm.test(\"Status is ok, response is json\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// request is public",
									"pm.test(\"Request is Public\", function () {",
									"    pm.expect(pm.request.to.not.have.header(\"Authorization\"));",
									"});",
									"",
									"// succes is true",
									"pm.test(\"Check success is true\", () => { ",
									"    pm.expect(pm.response.json().success).to.equal(true); ",
									"});",
									"",
									"// check keys in response",
									"var data = JSON.parse(responseBody);",
									"tests[\"Status code is 1\"] = data.status.code === 1;",
									"tests['Response has countries'] = responseBody.has('countries');",
									"tests['Response has ID'] = responseBody.has('id');",
									"tests['Response has name'] = responseBody.has('name');",
									"tests['Response has icon'] = responseBody.has('icon');",
									"tests['Response has plans'] = responseBody.has('plans');",
									"tests['Response has total count of countries'] = responseBody.has('total');",
									"",
									"// save country ID",
									"const { code } = pm.response",
									"if (code === 200) {",
									"    const { data: { countries: [{ id }]}} = pm.response.json();",
									"    pm.environment.set(\"country_id\", id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/esim/countries?take=1000&skip=0",
							"host": [
								"{{host}}"
							],
							"path": [
								"esim",
								"countries"
							],
							"query": [
								{
									"key": "take",
									"value": "1000"
								},
								{
									"key": "skip",
									"value": "0"
								},
								{
									"key": "filter",
									"value": "",
									"disabled": true
								},
								{
									"key": "alphabet",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get regions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status ok, format is JSON",
									"pm.test(\"Status is ok, response is json\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// request is public",
									"pm.test(\"Request is Public\", function () {",
									"    pm.expect(pm.request.to.not.have.header(\"Authorization\"));",
									"});",
									"",
									"// succes is true",
									"pm.test(\"Check success is true\", () => { ",
									"    pm.expect(pm.response.json().success).to.equal(true); ",
									"});",
									"",
									"// check keys in response",
									"var data = JSON.parse(responseBody);",
									"tests[\"Status code is 1\"] = data.status.code === 1;",
									"tests['Response has regions'] = responseBody.has('regions');",
									"tests['Response has ID'] = responseBody.has('id');",
									"tests['Response has name'] = responseBody.has('name');",
									"tests['Response has icon'] = responseBody.has('icon');",
									"tests['Response has plans'] = responseBody.has('plans');",
									"tests['Response has description'] = responseBody.has('description');",
									"tests['Response has icon1'] = responseBody.has('icon1');",
									"tests['Response has icon2'] = responseBody.has('icon2');",
									"tests['Response has total count of countries'] = responseBody.has('total');",
									"",
									"// save region ID",
									"const { code } = pm.response",
									"if (code === 200) {",
									"    const { data: { regions: [{ id }]}} = pm.response.json();",
									"    pm.environment.set(\"region_id\", id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/esim/regions?take=10&skip=0",
							"host": [
								"{{host}}"
							],
							"path": [
								"esim",
								"regions"
							],
							"query": [
								{
									"key": "take",
									"value": "10"
								},
								{
									"key": "skip",
									"value": "0"
								},
								{
									"key": "filter",
									"value": "",
									"disabled": true
								},
								{
									"key": "alphabet",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get subregions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status ok, format is JSON",
									"pm.test(\"Status is ok, response is json\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// request is public",
									"pm.test(\"Request is Public\", function () {",
									"    pm.expect(pm.request.to.not.have.header(\"Authorization\"));",
									"});",
									"",
									"// succes is true",
									"pm.test(\"Check success is true\", () => { ",
									"    pm.expect(pm.response.json().success).to.equal(true); ",
									"});",
									"",
									"// check keys in response",
									"var data = JSON.parse(responseBody);",
									"tests[\"Status code is 1\"] = data.status.code === 1;",
									"tests['Response has subregions'] = responseBody.has('subregions');",
									"tests['Response has ID'] = responseBody.has('id');",
									"tests['Response has name'] = responseBody.has('name');",
									"tests['Response has icon'] = responseBody.has('icon');",
									"tests['Response has plans'] = responseBody.has('plans');",
									"tests['Response has description'] = responseBody.has('description');",
									"tests['Response has icon1'] = responseBody.has('icon1');",
									"tests['Response has icon2'] = responseBody.has('icon2');",
									"tests['Response has total count of countries'] = responseBody.has('total');",
									"",
									"// save subregion ID",
									"const { code } = pm.response",
									"if (code === 200) {",
									"    const { data: { subregions: [{ id }]}} = pm.response.json();",
									"    pm.environment.set(\"subregion_id\", id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/esim/subregions?take=10&skip=0",
							"host": [
								"{{host}}"
							],
							"path": [
								"esim",
								"subregions"
							],
							"query": [
								{
									"key": "take",
									"value": "10"
								},
								{
									"key": "skip",
									"value": "0"
								},
								{
									"key": "filter",
									"value": "",
									"disabled": true
								},
								{
									"key": "alphabet",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all plans",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status ok, format is JSON",
									"pm.test(\"Status is ok, response is json\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// request is public",
									"pm.test(\"Request is Public\", function () {",
									"    pm.expect(pm.request.to.not.have.header(\"Authorization\"));",
									"});",
									"",
									"// succes is true",
									"pm.test(\"Check success is true\", () => { ",
									"    pm.expect(pm.response.json().success).to.equal(true); ",
									"});",
									"",
									"// check keys in response",
									"var data = JSON.parse(responseBody);",
									"tests[\"Status code is 1\"] = data.status.code === 1;",
									"tests['Response has ID'] = responseBody.has('id');",
									"tests['Response has name'] = responseBody.has('name');",
									"tests['Response has plan type'] = responseBody.has('planType');",
									"tests['Response has description'] = responseBody.has('description');",
									"tests['Response has icon1'] = responseBody.has('icon1');",
									"tests['Response has icon2'] = responseBody.has('icon2');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/esim/plans",
							"host": [
								"{{host}}"
							],
							"path": [
								"esim",
								"plans"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get package history",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status ok, format is JSON",
									"pm.test(\"Status is ok, response is json\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// request is public",
									"pm.test(\"Request is not Public\", function () {",
									"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
									"});",
									"",
									"// succes is true",
									"pm.test(\"Check success is true\", () => { ",
									"    pm.expect(pm.response.json().success).to.equal(true); ",
									"});",
									"",
									"// check keys in response",
									"var data = JSON.parse(responseBody);",
									"tests[\"Status code is 1\"] = data.status.code === 1;",
									"tests['Response has history'] = responseBody.has('history');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/esim/package-history/64",
							"host": [
								"{{host}}"
							],
							"path": [
								"esim",
								"package-history",
								"64"
							]
						}
					},
					"response": []
				},
				{
					"name": "Packages info (esim, voip)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status ok, format is JSON",
									"pm.test(\"Status is ok, response is json\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// request is public",
									"pm.test(\"Request is not Public\", function () {",
									"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
									"});",
									"",
									"// check keys in response",
									"var data = JSON.parse(responseBody);",
									"tests['Response has types'] = responseBody.has('types');",
									"tests['Response has id'] = responseBody.has('id');",
									"tests['Response has name'] = responseBody.has('name');",
									"tests['Response has createdAt'] = responseBody.has('createdAt');",
									"tests['Response has updatedAt'] = responseBody.has('updatedAt');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiYWNjZXNzSW1hZ2UiOiIzNjExYTkwMC0zYmUzLTRhN2QtYmUwOC04OWQ5ZThjNjIxOTAiLCJyb2xlSWQiOjEsImlhdCI6MTYxNTM3OTM0NiwiZXhwIjoxNjE1MzgyOTQ2fQ.P9kM0FGhlBTMLh-9NI6GGgDopGlfPxQ1esxDSMmNsms"
							}
						],
						"url": {
							"raw": "{{host}}/packages/info",
							"host": [
								"{{host}}"
							],
							"path": [
								"packages",
								"info"
							]
						}
					},
					"response": []
				},
				{
					"name": "All countries",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status ok, format is JSON",
									"pm.test(\"Status is ok, response is json\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// request is public",
									"pm.test(\"Request is not Public\", function () {",
									"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
									"});",
									"",
									"// check keys in response",
									"var data = JSON.parse(responseBody);",
									"tests['Response has ID'] = responseBody.has('id');",
									"tests['Response has name'] = responseBody.has('name');",
									"tests['Response has icon'] = responseBody.has('icon');",
									"tests['Response has isoCode'] = responseBody.has('isoCode');",
									"tests['Response has smallImage'] = responseBody.has('smallImage');",
									"tests['Response has bigImage'] = responseBody.has('bigImage');",
									"tests['Response has secondaryBigImage'] = responseBody.has('secondaryBigImage');",
									"tests['Response has active'] = responseBody.has('active');",
									"tests['Response has createdAt'] = responseBody.has('createdAt');",
									"tests['Response has updatedAt'] = responseBody.has('updatedAt');",
									"tests['Response has regionId'] = responseBody.has('regionId');",
									"tests['Response has subregionId'] = responseBody.has('subregionId');",
									"",
									"// save id for created profile name",
									"const countryObject = data.find(({ name }) => name === \"UNITED STATES\");",
									"pm.environment.set(\"countryForCity\", countryObject.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiYWNjZXNzSW1hZ2UiOiJkYjA5OTI4Yy03ZjU0LTRmN2EtODI4Ny00YjI4NzBiZmViMzYiLCJyb2xlSWQiOjEsImlhdCI6MTYxNTM4MzAyMiwiZXhwIjoxNjE1Mzg2NjIyfQ.U-81BFTHVfFQFn9iqstJXDrsbGWBip8MyPP2Kd6T_lA"
							}
						],
						"url": {
							"raw": "{{host}}/packages-user/countries",
							"host": [
								"{{host}}"
							],
							"path": [
								"packages-user",
								"countries"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cities for country ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status ok, format is JSON",
									"pm.test(\"Status is ok, response is json\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// request is public",
									"pm.test(\"Request is not Public\", function () {",
									"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
									"});",
									"",
									"// check keys in response",
									"var data = JSON.parse(responseBody);",
									"tests['Response has ID'] = responseBody.has('id');",
									"tests['Response has uuid'] = responseBody.has('uuid');",
									"tests['Response has prefix'] = responseBody.has('prefix');",
									"tests['Response has name'] = responseBody.has('name');",
									"tests['Response has createdAt'] = responseBody.has('createdAt');",
									"tests['Response has updatedAt'] = responseBody.has('updatedAt');",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiYWNjZXNzSW1hZ2UiOiJkYjA5OTI4Yy03ZjU0LTRmN2EtODI4Ny00YjI4NzBiZmViMzYiLCJyb2xlSWQiOjEsImlhdCI6MTYxNTM4MzAyMiwiZXhwIjoxNjE1Mzg2NjIyfQ.U-81BFTHVfFQFn9iqstJXDrsbGWBip8MyPP2Kd6T_lA"
							}
						],
						"url": {
							"raw": "{{host}}/packages-user/cities/{{countryForCity}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"packages-user",
								"cities",
								"{{countryForCity}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create package",
			"item": [
				{
					"name": "Create country package",
					"item": [
						{
							"name": "eSIM Countries",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// status ok, format is JSON",
											"pm.test(\"Status is ok, response is json\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"// request is public",
											"pm.test(\"Request is not Public\", function () {",
											"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
											"});",
											"",
											"// check keys in response",
											"var data = JSON.parse(responseBody);",
											"tests['Response has results'] = responseBody.has('results');",
											"tests['Response has ID'] = responseBody.has('id');",
											"tests['Response has Country Name'] = responseBody.has('name');",
											"tests['Response has isoCode'] = responseBody.has('isoCode');",
											"tests['Response has icon'] = responseBody.has('icon');",
											"tests['Response has smallImage'] = responseBody.has('smallImage');",
											"tests['Response has bigImage'] = responseBody.has('bigImage');",
											"tests['Response has secondaryBigImage'] = responseBody.has('secondaryBigImage');",
											"tests['Response has active'] = responseBody.has('active');",
											"tests['Response has createdAt'] = responseBody.has('createdAt');",
											"tests['Response has updatedAt'] = responseBody.has('updatedAt');",
											"tests['Response has regionId'] = responseBody.has('regionId');",
											"tests['Response has subregionId'] = responseBody.has('subregionId');",
											"tests['Response has zoneId'] = responseBody.has('zoneId');",
											"tests['Response has zone'] = responseBody.has('zone');",
											"tests['Response has title of zone'] = responseBody.has('title');",
											"tests['Response has key of zone'] = responseBody.has('key');",
											"tests['Response has countryPlans'] = responseBody.has('countryPlans');",
											"tests['Response has active'] = responseBody.has('active');",
											"tests['Response has plan'] = responseBody.has('plan');",
											"tests['Response has planType'] = responseBody.has('planType');",
											"tests['Response has description'] = responseBody.has('description');",
											"tests['Response has icon1'] = responseBody.has('icon1');",
											"tests['Response has icon2'] = responseBody.has('icon2');",
											"tests['Response has packages'] = responseBody.has('packages');",
											"",
											"// save country id",
											"const { code } = pm.response",
											"if (code === 200) {",
											"    const { results: [{ id }]} = pm.response.json();",
											"    pm.environment.set(\"esimCountryId\", id);",
											"}",
											"",
											" // check new country",
											"countryName = pm.environment.get(\"saveLocationCountryName\");",
											"isoCode = pm.environment.get(\"saveCountryIsoCode\");",
											"searchNewCountry = pm.environment.get(\"saveLocationCountryName\");",
											"const countryObject = data.results.find(({ name }) => name === searchNewCountry);",
											"pm.environment.set(\"newCountryId\", countryObject.id);",
											"",
											"tests[\"Created country with new name is exist\"] = countryObject.name === countryName;",
											"tests[\"Created country with new isoCode is exist\"] = countryObject.isoCode === isoCode;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiYWNjZXNzSW1hZ2UiOiJiZTA3NTExMS02NWU1LTQzMTItODgwZC04ODQyZjA0NWQ5ZDQiLCJyb2xlSWQiOjEsImlhdCI6MTYxNTQ3MjcyMCwiZXhwIjoxNjE1NDc2MzIwfQ.EqEhBg7IcrV0yG2_VXWjxFP9JtVjPpclsSrR8CMgFIE"
									}
								],
								"url": {
									"raw": "{{host}}/packages-esim/countries?page=1&perPage=1000&filter=all",
									"host": [
										"{{host}}"
									],
									"path": [
										"packages-esim",
										"countries"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "perPage",
											"value": "1000"
										},
										{
											"key": "filter",
											"value": "all"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create eSIM zone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// status ok, format is JSON",
											"pm.test(\"Status is ok, response is json\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"// request is public",
											"pm.test(\"Request is not Public\", function () {",
											"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
											"});",
											"",
											"// succes is true",
											"pm.test(\"Check success is true\", () => { ",
											"    pm.expect(pm.response.json().success).to.equal(true); ",
											"});",
											"",
											"// check keys in response",
											"var data = JSON.parse(responseBody);",
											"tests[\"Status code is 1\"] = data.status.code === 1;",
											"tests['Response has ID'] = responseBody.has('id');",
											"",
											"// save id",
											"const { code } = pm.response",
											"if (code === 200) {",
											"    const { data: { id }} = pm.response.json();",
											"    pm.environment.set(\"idOfNewZone\", id);",
											"}",
											"",
											"// save title and key",
											"var req = JSON.parse(pm.request.body.raw);",
											"pm.environment.set(\"saveNameOfZone\", req.title);",
											"pm.environment.set(\"saveCodeOfZone\", req.key);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiYWNjZXNzSW1hZ2UiOiI1NTJjYjVhOC0xOTgyLTRjODItOTJkYi0xMTg5MmIyNTk0YjkiLCJyb2xlSWQiOjEsImlhdCI6MTYxNTUzMjQ1MSwiZXhwIjoxNjE1NTM2MDUxfQ.VR1-WXxZu0uZd7bH5pOOzjgJ_nHlH9Zga_mtaHmi0Ns"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"title\":\"{{nameOfZone}}\",\"key\":\"{{codeOfZone}}\"}"
								},
								"url": {
									"raw": "{{host}}/esim-directory/esim-zones",
									"host": [
										"{{host}}"
									],
									"path": [
										"esim-directory",
										"esim-zones"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get eSIM zones",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// status ok, format is JSON",
											"pm.test(\"Status is ok, response is json\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"// request is public",
											"pm.test(\"Request is not Public\", function () {",
											"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
											"});",
											"",
											"// succes is true",
											"pm.test(\"Check success is true\", () => { ",
											"    pm.expect(pm.response.json().success).to.equal(true); ",
											"});",
											"",
											"// check keys in response",
											"var data = JSON.parse(responseBody);",
											"tests[\"Status code is 1\"] = data.status.code === 1;",
											"tests['Response has ID'] = responseBody.has('id');",
											"tests['Response has title'] = responseBody.has('title');",
											"tests['Response has key'] = responseBody.has('key');",
											"",
											"// check values",
											"searchedID = pm.environment.get(\"idOfNewZone\");",
											"const zoneObject = data.data?.find(({ id }) => id === searchedID);",
											"titleOfZone = pm.environment.get(\"saveNameOfZone\");",
											"tests[\"Title value is correct\"] = zoneObject.title === titleOfZone;",
											"codeOfZone = pm.environment.get(\"saveCodeOfZone\");",
											"tests[\"Code value is correct\"] = zoneObject.key === codeOfZone;",
											"",
											"// search zone f",
											"searchedZoneFId = \"Zone F\";",
											"const zoneFObject = data.data?.find(({ title }) => title === searchedZoneFId);",
											"pm.environment.set(\"zoneFId\", zoneFObject.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiYWNjZXNzSW1hZ2UiOiI1NTJjYjVhOC0xOTgyLTRjODItOTJkYi0xMTg5MmIyNTk0YjkiLCJyb2xlSWQiOjEsImlhdCI6MTYxNTUzMjQ1MSwiZXhwIjoxNjE1NTM2MDUxfQ.VR1-WXxZu0uZd7bH5pOOzjgJ_nHlH9Zga_mtaHmi0Ns"
									}
								],
								"url": {
									"raw": "{{host}}/esim-directory/esim-zones",
									"host": [
										"{{host}}"
									],
									"path": [
										"esim-directory",
										"esim-zones"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add zone for country",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// status ok, format is JSON",
											"pm.test(\"Status is ok, response is json\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"// request is public",
											"pm.test(\"Request is not Public\", function () {",
											"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
											"});",
											"",
											"// succes is true",
											"pm.test(\"Check success is true\", () => { ",
											"    pm.expect(pm.response.json().success).to.equal(true); ",
											"});",
											"",
											"// check keys in response",
											"var data = JSON.parse(responseBody);",
											"tests[\"Status code is 1\"] = data.status?.code === 1;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "authority",
										"value": "telesim.dunice-testing.com"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not\"A\\Brand\";v=\"99\""
									},
									{
										"key": "accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MywiYWNjZXNzSW1hZ2UiOiJhODE5N2IyNS02Mzc5LTQ1YjUtOGI0NC1mZDM1YTQyYjlmMGQiLCJyb2xlSWQiOjEsImlhdCI6MTYxNTgwNzUxNiwiZXhwIjoxNjE1ODExMTE2fQ.81cJfJIuJa7jZ0RkSKdNa8K3wknfaQrTuIxoOaI4ujc"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?1"
									},
									{
										"key": "user-agent",
										"value": "Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Mobile Safari/537.36"
									},
									{
										"key": "content-type",
										"value": "application/json;charset=UTF-8"
									},
									{
										"key": "origin",
										"value": "https://telesim.dunice-testing.com"
									},
									{
										"key": "sec-fetch-site",
										"value": "same-origin"
									},
									{
										"key": "sec-fetch-mode",
										"value": "cors"
									},
									{
										"key": "sec-fetch-dest",
										"value": "empty"
									},
									{
										"key": "referer",
										"value": "https://telesim.dunice-testing.com/staff/locations"
									},
									{
										"key": "accept-language",
										"value": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7"
									},
									{
										"key": "cookie",
										"value": "__stripe_mid=022acea0-71f7-472a-a175-86129de77e1286d738; G_ENABLED_IDPS=google; _ym_uid=1606920384323878833; _ym_d=1606920384; __stripe_sid=1c036638-3850-46bb-a524-ce562d6687f9dfa138"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"name\":\"{{saveLocationCountryName}}\",\"active\":true,\"zoneId\":{{zoneFId}}}"
								},
								"url": {
									"raw": "{{host}}/locations/edit-country/{{newCountryId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"locations",
										"edit-country",
										"{{newCountryId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "eSIM Bundles",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// status ok, format is JSON",
											"pm.test(\"Status is ok, response is json\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"// request is public",
											"pm.test(\"Request is not Public\", function () {",
											"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
											"});",
											"",
											"// succes is true",
											"pm.test(\"Check success is true\", () => { ",
											"    pm.expect(pm.response.json().success).to.equal(true); ",
											"});",
											"",
											"// check keys in response",
											"var data = JSON.parse(responseBody);",
											"tests[\"Status code is 1\"] = data.status.code === 1;",
											"tests['Response has bundles'] = responseBody.has('bundles');",
											"tests['Response has id'] = responseBody.has('id');",
											"tests['Response has i_product'] = responseBody.has('i_product');",
											"tests['Response has name'] = responseBody.has('name');",
											"",
											"// save product of Zone F ID",
											"var data = JSON.parse(responseBody);",
											"const productObject = data.data?.bundles?.find(({ name }) => name.has(\"ZoneF\"));",
											"pm.environment.set(\"productId\", productObject.i_product);",
											"pm.environment.set(\"zoneId\", productObject.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiYWNjZXNzSW1hZ2UiOiI4Mzk4MzMyYi1kOWE2LTQ5N2YtODlkMi1mYjZkOTRlMjAzM2EiLCJyb2xlSWQiOjEsImlhdCI6MTYxNTU0ODQ5MywiZXhwIjoxNjE1NTUyMDkzfQ.L80VktZvcxFdMBg4CdydwOH6RkFYdNvoqncYgye3x0I"
									}
								],
								"url": {
									"raw": "{{host}}/esim/bundles?page=1&perPage=1000",
									"host": [
										"{{host}}"
									],
									"path": [
										"esim",
										"bundles"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "perPage",
											"value": "1000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create country package",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// status ok, format is JSON",
											"pm.test(\"Status is ok, response is json\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"// request is public",
											"pm.test(\"Request is not Public\", function () {",
											"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
											"});",
											"",
											"// check keys in response",
											"var data = JSON.parse(responseBody);",
											"tests['Response has 1'] = responseBody.has(1);",
											"",
											"// save dynamic variables",
											"var req = JSON.parse(pm.request.body.raw);",
											"pm.environment.set(\"newPackageTitle\", req.title);",
											"pm.environment.set(\"newDefaultPrice\", req.defaultPrice);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiYWNjZXNzSW1hZ2UiOiI1NTJjYjVhOC0xOTgyLTRjODItOTJkYi0xMTg5MmIyNTk0YjkiLCJyb2xlSWQiOjEsImlhdCI6MTYxNTUzMjQ1MSwiZXhwIjoxNjE1NTM2MDUxfQ.VR1-WXxZu0uZd7bH5pOOzjgJ_nHlH9Zga_mtaHmi0Ns"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"country\":{{newCountryId}},\"title\":\"{{packageTitle}}\",\"plan\":{{activePlan}},\"product\":{{productId}},\"purchaseType\":{{activePurchaseType}},\"validity\":{{activeValidity}},\"defaultPrice\":{{price}},\"dataType\":{{activeDataType}},\"discountAmount\":0,\"priceWithDiscount\":{{price}}}"
								},
								"url": {
									"raw": "{{host}}/packages-esim/country/package",
									"host": [
										"{{host}}"
									],
									"path": [
										"packages-esim",
										"country",
										"package"
									]
								}
							},
							"response": []
						},
						{
							"name": "Countries Get package plans by location ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// status ok, format is JSON",
											"pm.test(\"Status is ok, response is json\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"// request is public",
											"pm.test(\"Request is not Public\", function () {",
											"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
											"});",
											"",
											"// succes is true",
											"pm.test(\"Check success is true\", () => { ",
											"    pm.expect(pm.response.json().success).to.equal(true); ",
											"});",
											"",
											"// check keys in response",
											"var data = JSON.parse(responseBody);",
											"tests[\"Status code is 1\"] = data.status.code === 1;",
											"tests['Response has ID'] = responseBody.has('id');",
											"tests['Response has Region Name'] = responseBody.has('name');",
											"tests['Response has icon'] = responseBody.has('icon');",
											"tests['Response has smallImage'] = responseBody.has('smallImage');",
											"tests['Response has bigImage'] = responseBody.has('bigImage');",
											"tests['Response has plans'] = responseBody.has('plans');",
											"tests['Response has planType'] = responseBody.has('planType');",
											"tests['Response has description'] = responseBody.has('description');",
											"tests['Response has icon1'] = responseBody.has('icon1');",
											"tests['Response has icon2'] = responseBody.has('icon2');",
											"tests['Response has packages'] = responseBody.has('packages');",
											"tests['Response has title'] = responseBody.has('title');",
											"tests['Response has product'] = responseBody.has('product');",
											"tests['Response has defaultPrice'] = responseBody.has('defaultPrice');",
											"tests['Response has discount'] = responseBody.has('discount');",
											"tests['Response has discountPercent'] = responseBody.has('discountPercent');",
											"tests['Response has discountAmount'] = responseBody.has('discountAmount');",
											"tests['Response has priceWithDiscount'] = responseBody.has('priceWithDiscount');",
											"tests['Response has validity'] = responseBody.has('validity');",
											"tests['Response has period'] = responseBody.has('period');",
											"tests['Response has purchaseType'] = responseBody.has('purchaseType');",
											"tests['Response has dataType'] = responseBody.has('dataType');",
											"tests['Response has dataType key'] = responseBody.has('key');",
											"tests['Response has isoCode'] = responseBody.has('subregions');",
											"tests['Response has icon'] = responseBody.has('countries');",
											"tests['Response has isoCode'] = responseBody.has('isoCode');",
											"tests['Response has icon'] = responseBody.has('icon');",
											"tests['Response has smallImage'] = responseBody.has('smallImage');",
											"tests['Response has bigImage'] = responseBody.has('bigImage');",
											"tests['Response has secondaryBigImage'] = responseBody.has('secondaryBigImage');",
											"tests['Response has operators'] = responseBody.has('operators');",
											"",
											"var data = JSON.parse(responseBody);",
											"tests['Response has packages'] = responseBody.has('packages');",
											"",
											"packageTitle = pm.environment.get(\"newPackageTitle\");",
											"const countryObject = data.data.plans[0].packages.find(({title}) => title === packageTitle);",
											"pm.environment.set(\"savePackageId\", countryObject.id);",
											"",
											"// check values",
											"countryName = pm.environment.get(\"saveLocationCountryName\");",
											"isoCode = pm.environment.get(\"saveCountryIsoCode\");",
											"packageTitle = pm.environment.get(\"newPackageTitle\");",
											"product = pm.environment.get(\"productId\");",
											"price = pm.environment.get(\"newDefaultPrice\");",
											"validityId = pm.environment.get(\"activeValidity\");",
											"purchaseTypeId = pm.environment.get(\"activePurchaseType\");",
											"planId = pm.environment.get(\"activePlan\");",
											"dataTypeId = pm.environment.get(\"activeDataType\");",
											"tests[\"Country name is equal to created\"] = data.data.name === countryName;",
											"tests[\"Country isoCode is equal to created\"] = data.data.isoCode === isoCode;",
											"tests['Package title is equal to created title'] = countryObject.title === packageTitle;",
											"tests['Product is equal to added product'] = countryObject.product === product;",
											"tests['Default price is equal to added price'] = countryObject.defaultPrice === price;",
											"tests['Validity id is equal to added'] = countryObject.validity.id === validityId;",
											"tests['Purchase type id is equal to added'] = countryObject.purchaseType.id === purchaseTypeId;",
											"tests['Data type id is equal to added'] = countryObject.dataType.id === dataTypeId;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/esim/plans/:location/:id",
									"host": [
										"{{host}}"
									],
									"path": [
										"esim",
										"plans",
										":location",
										":id"
									],
									"variable": [
										{
											"key": "location",
											"value": "country"
										},
										{
											"key": "id",
											"value": "{{newCountryId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get package by ID for country",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// status ok, format is JSON",
											"pm.test(\"Status is ok, response is json\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"// request is public",
											"pm.test(\"Request is not Public\", function () {",
											"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
											"});",
											"",
											"// succes is true",
											"pm.test(\"Check success is true\", () => { ",
											"    pm.expect(pm.response.json().success).to.equal(true); ",
											"});",
											"",
											"// check keys in response",
											"var data = JSON.parse(responseBody);",
											"tests[\"Status code is 1\"] = data.status?.code === 1;",
											"tests['Response has ID'] = responseBody.has('id');",
											"tests['Response has title'] = responseBody.has('title');",
											"tests['Response has product'] = responseBody.has('product');",
											"tests['Response has defaultPrice'] = responseBody.has('defaultPrice');",
											"tests['Response has discount'] = responseBody.has('discount');",
											"tests['Response has discountPercent'] = responseBody.has('discountPercent');",
											"tests['Response has discountAmount'] = responseBody.has('discountAmount');",
											"tests['Response has priceWithDiscount'] = responseBody.has('priceWithDiscount');",
											"tests['Response has dataType'] = responseBody.has('dataType');",
											"tests['Response has dataType key'] = responseBody.has('key');",
											"tests['Response has purchaseType'] = responseBody.has('purchaseType');",
											"tests['Response has validity'] = responseBody.has('validity');",
											"tests['Response has country'] = responseBody.has('country');",
											"tests['Response has country name'] = responseBody.has('name');",
											"tests['Response has isoCode'] = responseBody.has('isoCode');",
											"tests['Response has icon'] = responseBody.has('icon');",
											"tests['Response has smallImage'] = responseBody.has('smallImage');",
											"tests['Response has bigImage'] = responseBody.has('bigImage');",
											"tests['Response has secondaryBigImage'] = responseBody.has('secondaryBigImage');",
											"tests['Response has region'] = responseBody.has('region');",
											"tests['Response has subregion'] = responseBody.has('subregion');",
											"tests['Response has packageInfo'] = responseBody.has('packageInfo');",
											"tests['Response has product_group_name'] = responseBody.has('product_group_name');",
											"tests['Response has plan'] = responseBody.has('plan');",
											"tests['Response has planType'] = responseBody.has('planType');",
											"tests['Response has description'] = responseBody.has('description');",
											"tests['Response has icon1'] = responseBody.has('icon1');",
											"tests['Response has icon2'] = responseBody.has('icon2');",
											"tests['Response has operators'] = responseBody.has('operators');",
											"tests['Response has operators'] = responseBody.has('operators');",
											"",
											"// check values",
											"packageTitle = pm.environment.get(\"newPackageTitle\");",
											"countryName = pm.environment.get(\"saveLocationCountryName\");",
											"product = pm.environment.get(\"productId\");",
											"price = pm.environment.get(\"newDefaultPrice\");",
											"validityId = pm.environment.get(\"activeValidity\");",
											"purchaseTypeId = pm.environment.get(\"activePurchaseType\");",
											"planId = pm.environment.get(\"activePlan\");",
											"dataTypeId = pm.environment.get(\"activeDataType\");",
											"tests[\"Country name is equal to created\"] = data.data.country.name === countryName;",
											"tests['Package title is equal to created title'] = data.data.title === packageTitle;",
											"tests['Product is equal to added product'] = data.data.product === product;",
											"tests['Default price is equal to added price'] = data.data.defaultPrice === price;",
											"tests['Validity id is equal to added'] = data.data.validity.id === validityId;",
											"tests['Purchase type id is equal to added'] = data.data.purchaseType.id === purchaseTypeId;",
											"tests['Plan id is equal to added'] = data.data.plan.id === planId;",
											"tests['Data type id is equal to added'] = data.data.dataType.id === dataTypeId;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/esim/package/:id",
									"host": [
										"{{host}}"
									],
									"path": [
										"esim",
										"package",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{savePackageId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create region package",
					"item": [
						{
							"name": "eSIM Regions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// status ok, format is JSON",
											"pm.test(\"Status is ok, response is json\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"// request is public",
											"pm.test(\"Request is not Public\", function () {",
											"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
											"});",
											"",
											"// check keys in response",
											"var data = JSON.parse(responseBody);",
											"tests['Response has results'] = responseBody.has('results');",
											"tests['Response has ID'] = responseBody.has('id');",
											"tests['Response has Region Name'] = responseBody.has('name');",
											"tests['Response has icon'] = responseBody.has('icon');",
											"tests['Response has smallImage'] = responseBody.has('smallImage');",
											"tests['Response has bigImage'] = responseBody.has('bigImage');",
											"tests['Response has active'] = responseBody.has('active');",
											"tests['Response has createdAt'] = responseBody.has('createdAt');",
											"tests['Response has updatedAt'] = responseBody.has('updatedAt');",
											"tests['Response has regionPlans'] = responseBody.has('regionPlans');",
											"tests['Response has active'] = responseBody.has('active');",
											"tests['Response has plan'] = responseBody.has('plan');",
											"tests['Response has planType'] = responseBody.has('planType');",
											"tests['Response has description'] = responseBody.has('description');",
											"tests['Response has icon1'] = responseBody.has('icon1');",
											"tests['Response has icon2'] = responseBody.has('icon2');",
											"tests['Response has packages'] = responseBody.has('packages');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiYWNjZXNzSW1hZ2UiOiJiZTA3NTExMS02NWU1LTQzMTItODgwZC04ODQyZjA0NWQ5ZDQiLCJyb2xlSWQiOjEsImlhdCI6MTYxNTQ3MjcyMCwiZXhwIjoxNjE1NDc2MzIwfQ.EqEhBg7IcrV0yG2_VXWjxFP9JtVjPpclsSrR8CMgFIE"
									}
								],
								"url": {
									"raw": "{{host}}/packages-esim/regions?page=1&perPage=10&filer=all",
									"host": [
										"{{host}}"
									],
									"path": [
										"packages-esim",
										"regions"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "perPage",
											"value": "10"
										},
										{
											"key": "filer",
											"value": "all"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create region package",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// status ok, format is JSON",
											"pm.test(\"Status is ok, response is json\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"// request is public",
											"pm.test(\"Request is not Public\", function () {",
											"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
											"});",
											"",
											"// check keys in response",
											"var data = JSON.parse(responseBody);",
											"tests['Response has 1'] = responseBody.has(1);",
											"",
											"// save dynamic variables",
											"var req = JSON.parse(pm.request.body.raw);",
											"pm.environment.set(\"newRegionPackageTitle\", req.title);",
											"pm.environment.set(\"newRegionDefaultPrice\", req.defaultPrice);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiYWNjZXNzSW1hZ2UiOiI1NTJjYjVhOC0xOTgyLTRjODItOTJkYi0xMTg5MmIyNTk0YjkiLCJyb2xlSWQiOjEsImlhdCI6MTYxNTUzMjQ1MSwiZXhwIjoxNjE1NTM2MDUxfQ.VR1-WXxZu0uZd7bH5pOOzjgJ_nHlH9Zga_mtaHmi0Ns"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"region\": {{newRegiodId}},\n    \"title\": \"{{packageTitle}}\",\n    \"plan\": {{activePlan}},\n    \"product\": {{regionProductId}},\n    \"purchaseType\": {{activePurchaseType}},\n    \"validity\": {{activeValidity}},\n    \"defaultPrice\": {{price}},\n    \"dataType\": {{activeDataType}},\n    \"discountAmount\": 0,\n    \"priceWithDiscount\": {{price}}\n}"
								},
								"url": {
									"raw": "{{host}}/packages-esim/country/package",
									"host": [
										"{{host}}"
									],
									"path": [
										"packages-esim",
										"country",
										"package"
									]
								}
							},
							"response": []
						},
						{
							"name": "Regions Get package plans by location ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// status ok, format is JSON",
											"pm.test(\"Status is ok, response is json\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"// request is public",
											"pm.test(\"Request is not Public\", function () {",
											"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
											"});",
											"",
											"// succes is true",
											"pm.test(\"Check success is true\", () => { ",
											"    pm.expect(pm.response.json().success).to.equal(true); ",
											"});",
											"",
											"// check keys in response",
											"var data = JSON.parse(responseBody);",
											"tests[\"Status code is 1\"] = data.status?.code === 1;",
											"tests['Response has ID'] = responseBody.has('id');",
											"tests['Response has Region Name'] = responseBody.has('name');",
											"tests['Response has icon'] = responseBody.has('icon');",
											"tests['Response has smallImage'] = responseBody.has('smallImage');",
											"tests['Response has bigImage'] = responseBody.has('bigImage');",
											"tests['Response has plans'] = responseBody.has('plans');",
											"tests['Response has planType'] = responseBody.has('planType');",
											"tests['Response has description'] = responseBody.has('description');",
											"tests['Response has icon1'] = responseBody.has('icon1');",
											"tests['Response has icon2'] = responseBody.has('icon2');",
											"tests['Response has packages'] = responseBody.has('packages');",
											"tests['Response has title'] = responseBody.has('title');",
											"tests['Response has product'] = responseBody.has('product');",
											"tests['Response has defaultPrice'] = responseBody.has('defaultPrice');",
											"tests['Response has discount'] = responseBody.has('discount');",
											"tests['Response has discountPercent'] = responseBody.has('discountPercent');",
											"tests['Response has discountAmount'] = responseBody.has('discountAmount');",
											"tests['Response has priceWithDiscount'] = responseBody.has('priceWithDiscount');",
											"tests['Response has validity'] = responseBody.has('validity');",
											"tests['Response has period'] = responseBody.has('period');",
											"tests['Response has purchaseType'] = responseBody.has('purchaseType');",
											"tests['Response has dataType'] = responseBody.has('dataType');",
											"tests['Response has dataType key'] = responseBody.has('key');",
											"tests['Response has subregions'] = responseBody.has('subregions');",
											"tests['Response has countries'] = responseBody.has('countries');",
											"tests['Response has icon'] = responseBody.has('icon');",
											"tests['Response has smallImage'] = responseBody.has('smallImage');",
											"tests['Response has bigImage'] = responseBody.has('bigImage');",
											"",
											"// save package ID",
											"packageTitle = pm.environment.get(\"newRegionPackageTitle\");",
											"const countryObject = data.data.plans[0].packages.find(({title}) => title === packageTitle);",
											"pm.environment.set(\"saveRegionPackageId\", countryObject.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/esim/plans/:location/:id",
									"host": [
										"{{host}}"
									],
									"path": [
										"esim",
										"plans",
										":location",
										":id"
									],
									"variable": [
										{
											"key": "location",
											"value": "region"
										},
										{
											"key": "id",
											"value": "{{newRegionId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get package by ID for region",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// status ok, format is JSON",
											"pm.test(\"Status is ok, response is json\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"// request is public",
											"pm.test(\"Request is not Public\", function () {",
											"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
											"});",
											"",
											"// succes is true",
											"pm.test(\"Check success is true\", () => { ",
											"    pm.expect(pm.response.json().success).to.equal(true); ",
											"});",
											"",
											"// check keys in response",
											"var data = JSON.parse(responseBody);",
											"tests[\"Status code is 1\"] = data.status.code === 1;",
											"tests['Response has ID'] = responseBody.has('id');",
											"tests['Response has title'] = responseBody.has('title');",
											"tests['Response has product'] = responseBody.has('product');",
											"tests['Response has defaultPrice'] = responseBody.has('defaultPrice');",
											"tests['Response has discount'] = responseBody.has('discount');",
											"tests['Response has discountPercent'] = responseBody.has('discountPercent');",
											"tests['Response has discountAmount'] = responseBody.has('discountAmount');",
											"tests['Response has priceWithDiscount'] = responseBody.has('priceWithDiscount');",
											"tests['Response has dataType'] = responseBody.has('dataType');",
											"tests['Response has dataType key'] = responseBody.has('key');",
											"tests['Response has purchaseType'] = responseBody.has('purchaseType');",
											"tests['Response has validity'] = responseBody.has('validity');",
											"tests['Response has country'] = responseBody.has('country');",
											"tests['Response has country name'] = responseBody.has('name');",
											"tests['Response has icon'] = responseBody.has('icon');",
											"tests['Response has smallImage'] = responseBody.has('smallImage');",
											"tests['Response has region'] = responseBody.has('region');",
											"tests['Response has subregion'] = responseBody.has('subregion');",
											"tests['Response has packageInfo'] = responseBody.has('packageInfo');",
											"tests['Response has product_group_name'] = responseBody.has('product_group_name');",
											"tests['Response has plan'] = responseBody.has('plan');",
											"tests['Response has planType'] = responseBody.has('planType');",
											"tests['Response has description'] = responseBody.has('description');",
											"tests['Response has icon1'] = responseBody.has('icon1');",
											"tests['Response has icon2'] = responseBody.has('icon2');",
											"",
											"// check values",
											"regionId = pm.environment.get(\"saveRegionPackageId\");",
											"regionName = pm.environment.get(\"saveLocationRegionName\");",
											"packageTitle = pm.environment.get(\"newRegionPackageTitle\");",
											"product = pm.environment.get(\"regionProductId\");",
											"price = pm.environment.get(\"newRegionDefaultPrice\");",
											"validityId = pm.environment.get(\"activeValidity\");",
											"purchaseTypeId = pm.environment.get(\"activePurchaseType\");",
											"planId = pm.environment.get(\"activePlan\");",
											"dataTypeId = pm.environment.get(\"activeDataType\");",
											"tests[\"Package ID is equal to created\"] = data.data.id === regionId;",
											"tests[\"Region name is equal to created\"] = data.data.region.name === regionName;",
											"tests['Package title is equal to created title'] = data.data.title === packageTitle;",
											"tests['Product is equal to added product'] = data.data.product === Number(product);",
											"tests['Default price is equal to added price'] = data.data.defaultPrice === price;",
											"tests['Validity id is equal to added'] = data.data.validity.id === validityId;",
											"tests['Purchase type id is equal to added'] = data.data.purchaseType.id === purchaseTypeId;",
											"tests['Plan id is equal to added'] = data.data.plan.id === planId;",
											"tests['Data type id is equal to added'] = data.data.dataType.id === dataTypeId;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/esim/package/:id",
									"host": [
										"{{host}}"
									],
									"path": [
										"esim",
										"package",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{saveRegionPackageId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create subregion package",
					"item": [
						{
							"name": "eSIM Subregions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// status ok, format is JSON",
											"pm.test(\"Status is ok, response is json\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"// request is public",
											"pm.test(\"Request is not Public\", function () {",
											"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
											"});",
											"",
											"// check keys in response",
											"var data = JSON.parse(responseBody);",
											"tests['Response has results'] = responseBody.has('results');",
											"tests['Response has ID'] = responseBody.has('id');",
											"tests['Response has Subregion Name'] = responseBody.has('name');",
											"tests['Response has icon'] = responseBody.has('icon');",
											"tests['Response has smallImage'] = responseBody.has('smallImage');",
											"tests['Response has bigImage'] = responseBody.has('bigImage');",
											"tests['Response has active'] = responseBody.has('active');",
											"tests['Response has createdAt'] = responseBody.has('createdAt');",
											"tests['Response has updatedAt'] = responseBody.has('updatedAt');",
											"tests['Response has regionId'] = responseBody.has('regionId');",
											"tests['Response has subregionPlans'] = responseBody.has('subregionPlans');",
											"tests['Response has active'] = responseBody.has('active');",
											"tests['Response has plan'] = responseBody.has('plan');",
											"tests['Response has planType'] = responseBody.has('planType');",
											"tests['Response has description'] = responseBody.has('description');",
											"tests['Response has icon1'] = responseBody.has('icon1');",
											"tests['Response has icon2'] = responseBody.has('icon2');",
											"tests['Response has packages'] = responseBody.has('packages');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiYWNjZXNzSW1hZ2UiOiJiZTA3NTExMS02NWU1LTQzMTItODgwZC04ODQyZjA0NWQ5ZDQiLCJyb2xlSWQiOjEsImlhdCI6MTYxNTQ3MjcyMCwiZXhwIjoxNjE1NDc2MzIwfQ.EqEhBg7IcrV0yG2_VXWjxFP9JtVjPpclsSrR8CMgFIE"
									}
								],
								"url": {
									"raw": "{{host}}/packages-esim/subregions?page=1&perPage=10&filter=all",
									"host": [
										"{{host}}"
									],
									"path": [
										"packages-esim",
										"subregions"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "perPage",
											"value": "10"
										},
										{
											"key": "filter",
											"value": "all"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create subregion package",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// status ok, format is JSON",
											"pm.test(\"Status is ok, response is json\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"// request is public",
											"pm.test(\"Request is not Public\", function () {",
											"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
											"});",
											"",
											"// check keys in response",
											"var data = JSON.parse(responseBody);",
											"tests['Response has 1'] = responseBody.has(1);",
											"",
											"// save dynamic variables",
											"var req = JSON.parse(pm.request.body.raw);",
											"pm.environment.set(\"newSubregionPackageTitle\", req.title);",
											"pm.environment.set(\"newSubregionDefaultPrice\", req.defaultPrice);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiYWNjZXNzSW1hZ2UiOiI1NTJjYjVhOC0xOTgyLTRjODItOTJkYi0xMTg5MmIyNTk0YjkiLCJyb2xlSWQiOjEsImlhdCI6MTYxNTUzMjQ1MSwiZXhwIjoxNjE1NTM2MDUxfQ.VR1-WXxZu0uZd7bH5pOOzjgJ_nHlH9Zga_mtaHmi0Ns"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"subregion\":{{newSubregionId}},\"title\":\"{{packageTitle}}\",\"plan\":{{activePlan}},\"product\":{{subregionProductId}},\"purchaseType\":{{activePurchaseType}},\"validity\":{{activeValidity}},\"defaultPrice\":{{price}},\"dataType\":{{activeDataType}},\"discountAmount\":0,\"priceWithDiscount\":{{price}}}"
								},
								"url": {
									"raw": "{{host}}/packages-esim/country/package",
									"host": [
										"{{host}}"
									],
									"path": [
										"packages-esim",
										"country",
										"package"
									]
								}
							},
							"response": []
						},
						{
							"name": "Subregions Get package plans by location ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// status ok, format is JSON",
											"pm.test(\"Status is ok, response is json\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"// request is public",
											"pm.test(\"Request is not Public\", function () {",
											"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
											"});",
											"",
											"// succes is true",
											"pm.test(\"Check success is true\", () => { ",
											"    pm.expect(pm.response.json().success).to.equal(true); ",
											"});",
											"",
											"// check keys in response",
											"var data = JSON.parse(responseBody);",
											"tests[\"Status code is 1\"] = data.status?.code === 1;",
											"tests['Response has ID'] = responseBody.has('id');",
											"tests['Response has Region Name'] = responseBody.has('name');",
											"tests['Response has icon'] = responseBody.has('icon');",
											"tests['Response has smallImage'] = responseBody.has('smallImage');",
											"tests['Response has bigImage'] = responseBody.has('bigImage');",
											"tests['Response has plans'] = responseBody.has('plans');",
											"tests['Response has planType'] = responseBody.has('planType');",
											"tests['Response has description'] = responseBody.has('description');",
											"tests['Response has icon1'] = responseBody.has('icon1');",
											"tests['Response has icon2'] = responseBody.has('icon2');",
											"tests['Response has packages'] = responseBody.has('packages');",
											"tests['Response has title'] = responseBody.has('title');",
											"tests['Response has product'] = responseBody.has('product');",
											"tests['Response has defaultPrice'] = responseBody.has('defaultPrice');",
											"tests['Response has discount'] = responseBody.has('discount');",
											"tests['Response has discountPercent'] = responseBody.has('discountPercent');",
											"tests['Response has discountAmount'] = responseBody.has('discountAmount');",
											"tests['Response has priceWithDiscount'] = responseBody.has('priceWithDiscount');",
											"tests['Response has validity'] = responseBody.has('validity');",
											"tests['Response has period'] = responseBody.has('period');",
											"tests['Response has purchaseType'] = responseBody.has('purchaseType');",
											"tests['Response has dataType'] = responseBody.has('dataType');",
											"tests['Response has dataType key'] = responseBody.has('key');",
											"tests['Response has isoCode'] = responseBody.has('subregions');",
											"tests['Response has icon'] = responseBody.has('countries');",
											"tests['Response has isoCode'] = responseBody.has('isoCode');",
											"tests['Response has icon'] = responseBody.has('icon');",
											"tests['Response has smallImage'] = responseBody.has('smallImage');",
											"tests['Response has bigImage'] = responseBody.has('bigImage');",
											"tests['Response has secondaryBigImage'] = responseBody.has('secondaryBigImage');",
											"tests['Response has operators'] = responseBody.has('operators');",
											"",
											"// save package ID",
											"packageTitle = pm.environment.get(\"newSubregionPackageTitle\");",
											"const countryObject = data.data.plans[0].packages.find(({title}) => title === packageTitle);",
											"pm.environment.set(\"saveSubregionPackageId\", countryObject.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/esim/plans/:location/:id",
									"host": [
										"{{host}}"
									],
									"path": [
										"esim",
										"plans",
										":location",
										":id"
									],
									"variable": [
										{
											"key": "location",
											"value": "subregion"
										},
										{
											"key": "id",
											"value": "{{newSubregionId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get package by ID for subregion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// status ok, format is JSON",
											"pm.test(\"Status is ok, response is json\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"// request is public",
											"pm.test(\"Request is not Public\", function () {",
											"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
											"});",
											"",
											"// succes is true",
											"pm.test(\"Check success is true\", () => { ",
											"    pm.expect(pm.response.json().success).to.equal(true); ",
											"});",
											"",
											"// check keys in response",
											"var data = JSON.parse(responseBody);",
											"tests[\"Status code is 1\"] = data.status.code === 1;",
											"tests['Response has ID'] = responseBody.has('id');",
											"tests['Response has title'] = responseBody.has('title');",
											"tests['Response has product'] = responseBody.has('product');",
											"tests['Response has defaultPrice'] = responseBody.has('defaultPrice');",
											"tests['Response has discount'] = responseBody.has('discount');",
											"tests['Response has discountPercent'] = responseBody.has('discountPercent');",
											"tests['Response has discountAmount'] = responseBody.has('discountAmount');",
											"tests['Response has priceWithDiscount'] = responseBody.has('priceWithDiscount');",
											"tests['Response has dataType'] = responseBody.has('dataType');",
											"tests['Response has dataType key'] = responseBody.has('key');",
											"tests['Response has purchaseType'] = responseBody.has('purchaseType');",
											"tests['Response has validity'] = responseBody.has('validity');",
											"tests['Response has country'] = responseBody.has('country');",
											"tests['Response has country name'] = responseBody.has('name');",
											"tests['Response has icon'] = responseBody.has('icon');",
											"tests['Response has smallImage'] = responseBody.has('smallImage');",
											"tests['Response has region'] = responseBody.has('region');",
											"tests['Response has subregion'] = responseBody.has('subregion');",
											"tests['Response has packageInfo'] = responseBody.has('packageInfo');",
											"tests['Response has product_group_name'] = responseBody.has('product_group_name');",
											"tests['Response has plan'] = responseBody.has('plan');",
											"tests['Response has planType'] = responseBody.has('planType');",
											"tests['Response has description'] = responseBody.has('description');",
											"tests['Response has icon1'] = responseBody.has('icon1');",
											"tests['Response has icon2'] = responseBody.has('icon2');",
											"",
											"// check values",
											"subregionId = pm.environment.get(\"saveSubregionPackageId\");",
											"subregionName = pm.environment.get(\"saveLocationSubregionName\");",
											"packageTitle = pm.environment.get(\"newSubregionPackageTitle\");",
											"product = pm.environment.get(\"subregionProductId\");",
											"price = pm.environment.get(\"newSubregionDefaultPrice\");",
											"validityId = pm.environment.get(\"activeValidity\");",
											"purchaseTypeId = pm.environment.get(\"activePurchaseType\");",
											"planId = pm.environment.get(\"activePlan\");",
											"dataTypeId = pm.environment.get(\"activeDataType\");",
											"tests[\"Package ID is equal to created\"] = data.data.id === subregionId;",
											"tests[\"Subregion name is equal to created\"] = data.data.subregion.name === subregionName;",
											"tests['Package title is equal to created title'] = data.data.title === packageTitle;",
											"tests['Product is equal to added product'] = data.data.product === Number(product);",
											"tests['Default price is equal to added price'] = data.data.defaultPrice === price;",
											"tests['Validity id is equal to added'] = data.data.validity.id === validityId;",
											"tests['Purchase type id is equal to added'] = data.data.purchaseType.id === purchaseTypeId;",
											"tests['Plan id is equal to added'] = data.data.plan.id === planId;",
											"tests['Data type id is equal to added'] = data.data.dataType.id === dataTypeId;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/esim/package/:id",
									"host": [
										"{{host}}"
									],
									"path": [
										"esim",
										"package",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{saveSubregionPackageId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Mobile API smoke testing",
			"item": [
				{
					"name": "Auth",
					"item": [
						{
							"name": "Register",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// const { code } = pm.response",
											"",
											"// if (code === 200) {",
											"//     // add tokens to collection variables",
											"//     const { token, refreshToken } = pm.response.json();",
											"//     pm.collectionVariables.set(\"token\", token);",
											"//     pm.collectionVariables.set(\"refresh\", refreshToken);",
											"",
											"//     // add email and password to collection variables",
											"//     const { email, password } = JSON.parse(pm.request.body.raw);",
											"//     pm.collectionVariables.set(\"email\", email);",
											"//     pm.collectionVariables.set(\"password\", password);",
											"// }",
											"",
											"// status ok, format is JSON",
											"pm.test(\"Status is ok, response is json\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"// request is public",
											"pm.test(\"Request is Public\", function () {",
											"    pm.expect(pm.request.to.not.have.header(\"Authorization\"));",
											"});",
											"",
											"// succes is true",
											"pm.test(\"Check success is true\", () => { ",
											"    pm.expect(pm.response.json().success).to.equal(true); ",
											"});",
											"",
											"// check status code",
											"var data = JSON.parse(responseBody);",
											"tests[\"Status code is 1\"] = data.status.code === 1;",
											"",
											"// save dynamic variables",
											"var req = JSON.parse(pm.request.body.raw);",
											"pm.environment.set(\"login_email\", req.email);",
											"",
											"var req = JSON.parse(pm.request.body.raw);",
											"pm.environment.set(\"login_fullName\", req.fullName);",
											"",
											"var req = JSON.parse(pm.request.body.raw);",
											"pm.environment.set(\"login_password\", req.password);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"client\": \"web\",\n  \"device\": \"Chrome 86.0.4240.111\",\n  \"fullName\": \"{{reg_fullName}}\",\n  \"locale\": \"en\",\n  \"password\": \"{{reg_password}}\",\n  \"email\": \"{{reg_email}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/register",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"register"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "eSIM",
					"item": [
						{
							"name": "Get countries",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// status ok, format is JSON",
											"pm.test(\"Status is ok, response is json\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"// request is public",
											"pm.test(\"Request is Public\", function () {",
											"    pm.expect(pm.request.to.not.have.header(\"Authorization\"));",
											"});",
											"",
											"// succes is true",
											"pm.test(\"Check success is true\", () => { ",
											"    pm.expect(pm.response.json().success).to.equal(true); ",
											"});",
											"",
											"// check keys in response",
											"var data = JSON.parse(responseBody);",
											"tests[\"Status code is 1\"] = data.status.code === 1;",
											"tests['Response has countries'] = responseBody.has('countries');",
											"tests['Response has ID'] = responseBody.has('id');",
											"tests['Response has name'] = responseBody.has('name');",
											"tests['Response has icon'] = responseBody.has('icon');",
											"tests['Response has plans'] = responseBody.has('plans');",
											"tests['Response has total count of countries'] = responseBody.has('total');",
											"",
											"// save country ID",
											"countryName = pm.environment.get(\"saveLocationCountryName\")",
											"const countryObject = data.data.countries.find(({ name }) => name === countryName);",
											"pm.environment.set(\"country_id\", countryObject.id);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/esim/countries?take=1000&skip=0",
									"host": [
										"{{host}}"
									],
									"path": [
										"esim",
										"countries"
									],
									"query": [
										{
											"key": "take",
											"value": "1000"
										},
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "filter",
											"value": "",
											"disabled": true
										},
										{
											"key": "alphabet",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get regions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// status ok, format is JSON",
											"pm.test(\"Status is ok, response is json\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"// request is public",
											"pm.test(\"Request is Public\", function () {",
											"    pm.expect(pm.request.to.not.have.header(\"Authorization\"));",
											"});",
											"",
											"// succes is true",
											"pm.test(\"Check success is true\", () => { ",
											"    pm.expect(pm.response.json().success).to.equal(true); ",
											"});",
											"",
											"// check keys in response",
											"var data = JSON.parse(responseBody);",
											"tests[\"Status code is 1\"] = data.status.code === 1;",
											"tests['Response has regions'] = responseBody.has('regions');",
											"tests['Response has ID'] = responseBody.has('id');",
											"tests['Response has name'] = responseBody.has('name');",
											"tests['Response has icon'] = responseBody.has('icon');",
											"tests['Response has plans'] = responseBody.has('plans');",
											"tests['Response has description'] = responseBody.has('description');",
											"tests['Response has icon1'] = responseBody.has('icon1');",
											"tests['Response has icon2'] = responseBody.has('icon2');",
											"tests['Response has total count of countries'] = responseBody.has('total');",
											"",
											"// save region ID",
											"regionName = pm.environment.get(\"saveLocationRegionName\")",
											"const regionObject = data.data.regions.find(({ name }) => name === regionName);",
											"pm.environment.set(\"region_id\", regionObject.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/esim/regions?take=100&skip=0",
									"host": [
										"{{host}}"
									],
									"path": [
										"esim",
										"regions"
									],
									"query": [
										{
											"key": "take",
											"value": "100"
										},
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "filter",
											"value": "",
											"disabled": true
										},
										{
											"key": "alphabet",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get subregions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// status ok, format is JSON",
											"pm.test(\"Status is ok, response is json\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"// request is public",
											"pm.test(\"Request is Public\", function () {",
											"    pm.expect(pm.request.to.not.have.header(\"Authorization\"));",
											"});",
											"",
											"// succes is true",
											"pm.test(\"Check success is true\", () => { ",
											"    pm.expect(pm.response.json().success).to.equal(true); ",
											"});",
											"",
											"// check keys in response",
											"var data = JSON.parse(responseBody);",
											"tests[\"Status code is 1\"] = data.status.code === 1;",
											"tests['Response has subregions'] = responseBody.has('subregions');",
											"tests['Response has ID'] = responseBody.has('id');",
											"tests['Response has name'] = responseBody.has('name');",
											"tests['Response has icon'] = responseBody.has('icon');",
											"tests['Response has plans'] = responseBody.has('plans');",
											"tests['Response has description'] = responseBody.has('description');",
											"tests['Response has icon1'] = responseBody.has('icon1');",
											"tests['Response has icon2'] = responseBody.has('icon2');",
											"tests['Response has total count of countries'] = responseBody.has('total');",
											"",
											"// save subregion ID",
											"subregionName = pm.environment.get(\"saveLocationSubregionName\")",
											"console.log(subregionName)",
											"const subregionObject = data.data.subregions.find(({ name }) => name === subregionName);",
											"console.log(subregionObject)",
											"pm.environment.set(\"subregion_id\", subregionObject.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/esim/subregions?take=100&skip=0",
									"host": [
										"{{host}}"
									],
									"path": [
										"esim",
										"subregions"
									],
									"query": [
										{
											"key": "take",
											"value": "100"
										},
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "filter",
											"value": "",
											"disabled": true
										},
										{
											"key": "alphabet",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all plans",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// status ok, format is JSON",
											"pm.test(\"Status is ok, response is json\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"// request is public",
											"pm.test(\"Request is Public\", function () {",
											"    pm.expect(pm.request.to.not.have.header(\"Authorization\"));",
											"});",
											"",
											"// succes is true",
											"pm.test(\"Check success is true\", () => { ",
											"    pm.expect(pm.response.json().success).to.equal(true); ",
											"});",
											"",
											"// check keys in response",
											"var data = JSON.parse(responseBody);",
											"tests[\"Status code is 1\"] = data.status.code === 1;",
											"tests['Response has ID'] = responseBody.has('id');",
											"tests['Response has name'] = responseBody.has('name');",
											"tests['Response has plan type'] = responseBody.has('planType');",
											"tests['Response has description'] = responseBody.has('description');",
											"tests['Response has icon1'] = responseBody.has('icon1');",
											"tests['Response has icon2'] = responseBody.has('icon2');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/esim/plans",
									"host": [
										"{{host}}"
									],
									"path": [
										"esim",
										"plans"
									]
								}
							},
							"response": []
						},
						{
							"name": "Countries Get package plans by location ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// status ok, format is JSON",
											"pm.test(\"Status is ok, response is json\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"// request is public",
											"pm.test(\"Request is not Public\", function () {",
											"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
											"});",
											"",
											"// succes is true",
											"pm.test(\"Check success is true\", () => { ",
											"    pm.expect(pm.response.json().success).to.equal(true); ",
											"});",
											"",
											"// check keys in response",
											"var data = JSON.parse(responseBody);",
											"tests[\"Status code is 1\"] = data.status.code === 1;",
											"tests['Response has ID'] = responseBody.has('id');",
											"tests['Response has Region Name'] = responseBody.has('name');",
											"tests['Response has icon'] = responseBody.has('icon');",
											"tests['Response has smallImage'] = responseBody.has('smallImage');",
											"tests['Response has bigImage'] = responseBody.has('bigImage');",
											"tests['Response has plans'] = responseBody.has('plans');",
											"tests['Response has planType'] = responseBody.has('planType');",
											"tests['Response has description'] = responseBody.has('description');",
											"tests['Response has icon1'] = responseBody.has('icon1');",
											"tests['Response has icon2'] = responseBody.has('icon2');",
											"tests['Response has packages'] = responseBody.has('packages');",
											"tests['Response has title'] = responseBody.has('title');",
											"tests['Response has product'] = responseBody.has('product');",
											"tests['Response has defaultPrice'] = responseBody.has('defaultPrice');",
											"tests['Response has discount'] = responseBody.has('discount');",
											"tests['Response has discountPercent'] = responseBody.has('discountPercent');",
											"tests['Response has discountAmount'] = responseBody.has('discountAmount');",
											"tests['Response has priceWithDiscount'] = responseBody.has('priceWithDiscount');",
											"tests['Response has validity'] = responseBody.has('validity');",
											"tests['Response has period'] = responseBody.has('period');",
											"tests['Response has purchaseType'] = responseBody.has('purchaseType');",
											"tests['Response has dataType'] = responseBody.has('dataType');",
											"tests['Response has dataType key'] = responseBody.has('key');",
											"tests['Response has isoCode'] = responseBody.has('subregions');",
											"tests['Response has icon'] = responseBody.has('countries');",
											"tests['Response has isoCode'] = responseBody.has('isoCode');",
											"tests['Response has icon'] = responseBody.has('icon');",
											"tests['Response has smallImage'] = responseBody.has('smallImage');",
											"tests['Response has bigImage'] = responseBody.has('bigImage');",
											"tests['Response has secondaryBigImage'] = responseBody.has('secondaryBigImage');",
											"tests['Response has operators'] = responseBody.has('operators');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/esim/plans/:location/:id",
									"host": [
										"{{host}}"
									],
									"path": [
										"esim",
										"plans",
										":location",
										":id"
									],
									"variable": [
										{
											"key": "location",
											"value": "country"
										},
										{
											"key": "id",
											"value": "{{newCountryId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Regions Get package plans by location ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// status ok, format is JSON",
											"pm.test(\"Status is ok, response is json\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"// request is public",
											"pm.test(\"Request is not Public\", function () {",
											"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
											"});",
											"",
											"// succes is true",
											"pm.test(\"Check success is true\", () => { ",
											"    pm.expect(pm.response.json().success).to.equal(true); ",
											"});",
											"",
											"// check keys in response",
											"var data = JSON.parse(responseBody);",
											"// tests[\"Status code is 1\"] = data.status.code === 1;",
											"tests['Response has ID'] = responseBody.has('id');",
											"tests['Response has Region Name'] = responseBody.has('name');",
											"tests['Response has icon'] = responseBody.has('icon');",
											"tests['Response has smallImage'] = responseBody.has('smallImage');",
											"tests['Response has bigImage'] = responseBody.has('bigImage');",
											"tests['Response has plans'] = responseBody.has('plans');",
											"tests['Response has planType'] = responseBody.has('planType');",
											"tests['Response has description'] = responseBody.has('description');",
											"tests['Response has icon1'] = responseBody.has('icon1');",
											"tests['Response has icon2'] = responseBody.has('icon2');",
											"tests['Response has packages'] = responseBody.has('packages');",
											"tests['Response has title'] = responseBody.has('title');",
											"tests['Response has product'] = responseBody.has('product');",
											"tests['Response has defaultPrice'] = responseBody.has('defaultPrice');",
											"tests['Response has discount'] = responseBody.has('discount');",
											"tests['Response has discountPercent'] = responseBody.has('discountPercent');",
											"tests['Response has discountAmount'] = responseBody.has('discountAmount');",
											"tests['Response has priceWithDiscount'] = responseBody.has('priceWithDiscount');",
											"tests['Response has validity'] = responseBody.has('validity');",
											"tests['Response has period'] = responseBody.has('period');",
											"tests['Response has purchaseType'] = responseBody.has('purchaseType');",
											"tests['Response has dataType'] = responseBody.has('dataType');",
											"tests['Response has dataType key'] = responseBody.has('key');",
											"tests['Response has subregions'] = responseBody.has('subregions');",
											"tests['Response has countries'] = responseBody.has('countries');",
											"tests['Response has isoCode'] = responseBody.has('isoCode');",
											"tests['Response has icon'] = responseBody.has('icon');",
											"tests['Response has smallImage'] = responseBody.has('smallImage');",
											"tests['Response has bigImage'] = responseBody.has('bigImage');",
											"tests['Response has secondaryBigImage'] = responseBody.has('secondaryBigImage');",
											"tests['Response has operators'] = responseBody.has('operators');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/esim/plans/:location/:id",
									"host": [
										"{{host}}"
									],
									"path": [
										"esim",
										"plans",
										":location",
										":id"
									],
									"variable": [
										{
											"key": "location",
											"value": "region"
										},
										{
											"key": "id",
											"value": "{{newRegionId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Subregions Get package plans by location ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// status ok, format is JSON",
											"pm.test(\"Status is ok, response is json\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"// request is public",
											"pm.test(\"Request is not Public\", function () {",
											"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
											"});",
											"",
											"// succes is true",
											"pm.test(\"Check success is true\", () => { ",
											"    pm.expect(pm.response.json().success).to.equal(true); ",
											"});",
											"",
											"// check keys in response",
											"var data = JSON.parse(responseBody);",
											"// tests[\"Status code is 1\"] = data.status.code === 1;",
											"tests['Response has ID'] = responseBody.has('id');",
											"tests['Response has Region Name'] = responseBody.has('name');",
											"tests['Response has icon'] = responseBody.has('icon');",
											"tests['Response has smallImage'] = responseBody.has('smallImage');",
											"tests['Response has bigImage'] = responseBody.has('bigImage');",
											"tests['Response has plans'] = responseBody.has('plans');",
											"tests['Response has planType'] = responseBody.has('planType');",
											"tests['Response has description'] = responseBody.has('description');",
											"tests['Response has icon1'] = responseBody.has('icon1');",
											"tests['Response has icon2'] = responseBody.has('icon2');",
											"tests['Response has packages'] = responseBody.has('packages');",
											"tests['Response has title'] = responseBody.has('title');",
											"tests['Response has product'] = responseBody.has('product');",
											"tests['Response has defaultPrice'] = responseBody.has('defaultPrice');",
											"tests['Response has discount'] = responseBody.has('discount');",
											"tests['Response has discountPercent'] = responseBody.has('discountPercent');",
											"tests['Response has discountAmount'] = responseBody.has('discountAmount');",
											"tests['Response has priceWithDiscount'] = responseBody.has('priceWithDiscount');",
											"tests['Response has validity'] = responseBody.has('validity');",
											"tests['Response has period'] = responseBody.has('period');",
											"tests['Response has purchaseType'] = responseBody.has('purchaseType');",
											"tests['Response has dataType'] = responseBody.has('dataType');",
											"tests['Response has dataType key'] = responseBody.has('key');",
											"tests['Response has isoCode'] = responseBody.has('subregions');",
											"tests['Response has icon'] = responseBody.has('countries');",
											"tests['Response has isoCode'] = responseBody.has('isoCode');",
											"tests['Response has icon'] = responseBody.has('icon');",
											"tests['Response has smallImage'] = responseBody.has('smallImage');",
											"tests['Response has bigImage'] = responseBody.has('bigImage');",
											"tests['Response has secondaryBigImage'] = responseBody.has('secondaryBigImage');",
											"tests['Response has operators'] = responseBody.has('operators');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/esim/plans/:location/:id",
									"host": [
										"{{host}}"
									],
									"path": [
										"esim",
										"plans",
										":location",
										":id"
									],
									"variable": [
										{
											"key": "location",
											"value": "subregion"
										},
										{
											"key": "id",
											"value": "{{newSubregionId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get package by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// status ok, format is JSON",
											"pm.test(\"Status is ok, response is json\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"// request is public",
											"pm.test(\"Request is not Public\", function () {",
											"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
											"});",
											"",
											"// succes is true",
											"pm.test(\"Check success is true\", () => { ",
											"    pm.expect(pm.response.json().success).to.equal(true); ",
											"});",
											"",
											"// check keys in response",
											"var data = JSON.parse(responseBody);",
											"// tests[\"Status code is 1\"] = data.status.code === 1;",
											"tests['Response has ID'] = responseBody.has('id');",
											"tests['Response has title'] = responseBody.has('title');",
											"tests['Response has product'] = responseBody.has('product');",
											"tests['Response has defaultPrice'] = responseBody.has('defaultPrice');",
											"tests['Response has discount'] = responseBody.has('discount');",
											"tests['Response has discountPercent'] = responseBody.has('discountPercent');",
											"tests['Response has discountAmount'] = responseBody.has('discountAmount');",
											"tests['Response has priceWithDiscount'] = responseBody.has('priceWithDiscount');",
											"tests['Response has dataType'] = responseBody.has('dataType');",
											"tests['Response has dataType key'] = responseBody.has('key');",
											"tests['Response has purchaseType'] = responseBody.has('purchaseType');",
											"tests['Response has validity'] = responseBody.has('validity');",
											"tests['Response has country'] = responseBody.has('country');",
											"tests['Response has country name'] = responseBody.has('name');",
											"tests['Response has isoCode'] = responseBody.has('isoCode');",
											"tests['Response has icon'] = responseBody.has('icon');",
											"tests['Response has smallImage'] = responseBody.has('smallImage');",
											"tests['Response has bigImage'] = responseBody.has('bigImage');",
											"tests['Response has secondaryBigImage'] = responseBody.has('secondaryBigImage');",
											"tests['Response has region'] = responseBody.has('region');",
											"tests['Response has subregion'] = responseBody.has('subregion');",
											"tests['Response has packageInfo'] = responseBody.has('packageInfo');",
											"tests['Response has product_group_name'] = responseBody.has('product_group_name');",
											"tests['Response has plan'] = responseBody.has('plan');",
											"tests['Response has planType'] = responseBody.has('planType');",
											"tests['Response has description'] = responseBody.has('description');",
											"tests['Response has icon1'] = responseBody.has('icon1');",
											"tests['Response has icon2'] = responseBody.has('icon2');",
											"tests['Response has operators'] = responseBody.has('operators');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/esim/package/:id",
									"host": [
										"{{host}}"
									],
									"path": [
										"esim",
										"package",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{savePackageId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create eSIM profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// save dynamic variables",
											"var req = JSON.parse(pm.request.body.raw);",
											"pm.environment.set(\"checkProfileName\", req.profileName);",
											"",
											"// status ok, format is JSON",
											"pm.test(\"Status is ok, response is json\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"// request is public",
											"pm.test(\"Request is not Public\", function () {",
											"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
											"});",
											"",
											"// succes is true",
											"pm.test(\"Check success is true\", () => { ",
											"    pm.expect(pm.response.json().success).to.equal(true); ",
											"});",
											"",
											"// check keys in response",
											"var data = JSON.parse(responseBody);",
											"tests[\"Status code is 1\"] = data.status?.code === 1;",
											"tests['Response has ID'] = responseBody.has('id');",
											"tests['Response has Profile Name'] = responseBody.has('profileName');",
											"tests['Response has installed status'] = responseBody.has('installed');",
											"tests['Response has ESIM data'] = responseBody.has('esim');",
											"tests['Response has VOIP i_account'] = responseBody.has('i_account');",
											"tests['Response has ICCID'] = responseBody.has('ICCID');",
											"tests['Response has IMSI'] = responseBody.has('IMSI');",
											"tests['Response has MSISDN'] = responseBody.has('MSISDN');",
											"tests['Response has ESIM_QR_CODE'] = responseBody.has('ESIM_QR_CODE');",
											"tests['Response has SM_DP_ADDRESS'] = responseBody.has('SM_DP_ADDRESS');",
											"tests['Response has ACTIVATION_CODE'] = responseBody.has('ACTIVATION_CODE');",
											"tests['Response has title'] = responseBody.has('title');",
											"tests['Response has product'] = responseBody.has('product');",
											"tests['Response has defaultPrice'] = responseBody.has('defaultPrice');",
											"tests['Response has discount'] = responseBody.has('discount');",
											"tests['Response has discountPercent'] = responseBody.has('discountPercent');",
											"tests['Response has discountAmount'] = responseBody.has('discountAmount');",
											"tests['Response has priceWithDiscount'] = responseBody.has('priceWithDiscount');",
											"tests['Response has dataType'] = responseBody.has('dataType');",
											"tests['Response has dataType key'] = responseBody.has('key');",
											"tests['Response has purchaseType'] = responseBody.has('purchaseType');",
											"tests['Response has validity'] = responseBody.has('validity');",
											"tests['Response has country'] = responseBody.has('country');",
											"tests['Response has country name'] = responseBody.has('name');",
											"tests['Response has isoCode'] = responseBody.has('isoCode');",
											"tests['Response has icon'] = responseBody.has('icon');",
											"tests['Response has smallImage'] = responseBody.has('smallImage');",
											"tests['Response has bigImage'] = responseBody.has('bigImage');",
											"tests['Response has secondaryBigImage'] = responseBody.has('secondaryBigImage');",
											"tests['Response has region'] = responseBody.has('region');",
											"tests['Response has subregion'] = responseBody.has('subregion');",
											"tests['Response has plan'] = responseBody.has('plan');",
											"tests['Response has planType'] = responseBody.has('planType');",
											"tests['Response has operators'] = responseBody.has('operators');",
											"tests['Response has networkGenerations'] = responseBody.has('networkGenerations');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"profileName\": \"{{profileName}}\",\n    \"package\": {{savePackageId}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/esim/create",
									"host": [
										"{{host}}"
									],
									"path": [
										"esim",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get self active eSIM profiles",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// status ok, format is JSON",
											"pm.test(\"Status is ok, response is json\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"// request is public",
											"pm.test(\"Request is not Public\", function () {",
											"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
											"});",
											"",
											"// succes is true",
											"pm.test(\"Check success is true\", () => { ",
											"    pm.expect(pm.response.json().success).to.equal(true); ",
											"});",
											"",
											"// check keys in response",
											"var data = JSON.parse(responseBody);",
											"tests[\"Status code is 1\"] = data.status.code === 1;",
											"tests['Response has ID'] = responseBody.has('id');",
											"tests['Response has Profile Name'] = responseBody.has('profileName');",
											"// check new profile name",
											"newProfileName = pm.environment.get(\"checkProfileName\");",
											"tests['Response has created Profile Name'] = responseBody.has(newProfileName);",
											"//",
											"tests['Response has installed status'] = responseBody.has('installed');",
											"tests['Response has ESIM data'] = responseBody.has('esim');",
											"tests['Response has VOIP i_account'] = responseBody.has('i_account');",
											"tests['Response has ICCID'] = responseBody.has('ICCID');",
											"tests['Response has IMSI'] = responseBody.has('IMSI');",
											"tests['Response has MSISDN'] = responseBody.has('MSISDN');",
											"tests['Response has ESIM_QR_CODE'] = responseBody.has('ESIM_QR_CODE');",
											"tests['Response has SM_DP_ADDRESS'] = responseBody.has('SM_DP_ADDRESS');",
											"tests['Response has ACTIVATION_CODE'] = responseBody.has('ACTIVATION_CODE');",
											"tests['Response has title'] = responseBody.has('title');",
											"tests['Response has product'] = responseBody.has('product');",
											"tests['Response has defaultPrice'] = responseBody.has('defaultPrice');",
											"tests['Response has discount'] = responseBody.has('discount');",
											"tests['Response has discountPercent'] = responseBody.has('discountPercent');",
											"tests['Response has discountAmount'] = responseBody.has('discountAmount');",
											"tests['Response has priceWithDiscount'] = responseBody.has('priceWithDiscount');",
											"tests['Response has dataType'] = responseBody.has('dataType');",
											"tests['Response has dataType key'] = responseBody.has('key');",
											"tests['Response has purchaseType'] = responseBody.has('purchaseType');",
											"tests['Response has validity'] = responseBody.has('validity');",
											"tests['Response has country'] = responseBody.has('country');",
											"tests['Response has country name'] = responseBody.has('name');",
											"tests['Response has isoCode'] = responseBody.has('isoCode');",
											"tests['Response has icon'] = responseBody.has('icon');",
											"tests['Response has smallImage'] = responseBody.has('smallImage');",
											"tests['Response has bigImage'] = responseBody.has('bigImage');",
											"tests['Response has secondaryBigImage'] = responseBody.has('secondaryBigImage');",
											"tests['Response has region'] = responseBody.has('region');",
											"tests['Response has subregion'] = responseBody.has('subregion');",
											"tests['Response has plan'] = responseBody.has('plan');",
											"tests['Response has planType'] = responseBody.has('planType');",
											"tests['Response has operators'] = responseBody.has('operators');",
											"tests['Response has networkGenerations'] = responseBody.has('networkGenerations');",
											"",
											"// save id for created profile name",
											"searchedProfileName = pm.environment.get(\"checkProfileName\");",
											"const profileObject = data.data?.profiles?.find(({ profileName }) => profileName === searchedProfileName);",
											"pm.environment.set(\"profile_id\", profileObject.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/esim/active",
									"host": [
										"{{host}}"
									],
									"path": [
										"esim",
										"active"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update package for eSIM profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// status ok, format is JSON",
											"pm.test(\"Status is ok, response is json\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"// request is public",
											"pm.test(\"Request is not Public\", function () {",
											"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
											"});",
											"",
											"// succes is true",
											"pm.test(\"Check success is true\", () => { ",
											"    pm.expect(pm.response.json().success).to.equal(true); ",
											"});",
											"",
											"// check keys in response",
											"var data = JSON.parse(responseBody);",
											"tests[\"Status code is 1\"] = data.status.code === 1;",
											"tests['Response has ID'] = responseBody.has('id');",
											"tests['Response has Profile Name'] = responseBody.has('profileName');",
											"// check new profile name",
											"newProfileName = pm.environment.get(\"checkProfileName\");",
											"tests['Response has created Profile Name'] = responseBody.has(newProfileName);",
											"//",
											"tests['Response has installed status'] = responseBody.has('installed');",
											"tests['Response has ESIM data'] = responseBody.has('esim');",
											"tests['Response has VOIP i_account'] = responseBody.has('i_account');",
											"tests['Response has ICCID'] = responseBody.has('ICCID');",
											"tests['Response has IMSI'] = responseBody.has('IMSI');",
											"tests['Response has MSISDN'] = responseBody.has('MSISDN');",
											"tests['Response has ESIM_QR_CODE'] = responseBody.has('ESIM_QR_CODE');",
											"tests['Response has SM_DP_ADDRESS'] = responseBody.has('SM_DP_ADDRESS');",
											"tests['Response has ACTIVATION_CODE'] = responseBody.has('ACTIVATION_CODE');",
											"tests['Response has title'] = responseBody.has('title');",
											"tests['Response has product'] = responseBody.has('product');",
											"tests['Response has defaultPrice'] = responseBody.has('defaultPrice');",
											"tests['Response has discount'] = responseBody.has('discount');",
											"tests['Response has discountPercent'] = responseBody.has('discountPercent');",
											"tests['Response has discountAmount'] = responseBody.has('discountAmount');",
											"tests['Response has priceWithDiscount'] = responseBody.has('priceWithDiscount');",
											"tests['Response has dataType'] = responseBody.has('dataType');",
											"tests['Response has dataType key'] = responseBody.has('key');",
											"tests['Response has purchaseType'] = responseBody.has('purchaseType');",
											"tests['Response has validity'] = responseBody.has('validity');",
											"tests['Response has country'] = responseBody.has('country');",
											"tests['Response has country name'] = responseBody.has('name');",
											"tests['Response has isoCode'] = responseBody.has('isoCode');",
											"tests['Response has icon'] = responseBody.has('icon');",
											"tests['Response has smallImage'] = responseBody.has('smallImage');",
											"tests['Response has bigImage'] = responseBody.has('bigImage');",
											"tests['Response has secondaryBigImage'] = responseBody.has('secondaryBigImage');",
											"tests['Response has region'] = responseBody.has('region');",
											"tests['Response has subregion'] = responseBody.has('subregion');",
											"tests['Response has plan'] = responseBody.has('plan');",
											"tests['Response has planType'] = responseBody.has('planType');",
											"tests['Response has operators'] = responseBody.has('operators');",
											"tests['Response has networkGenerations'] = responseBody.has('networkGenerations');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"profile\": {{profile_id}},\n    \"package\": {{savePackageId}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/esim/update",
									"host": [
										"{{host}}"
									],
									"path": [
										"esim",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get eSIM balance by profile ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// status ok, format is JSON",
											"pm.test(\"Status is ok, response is json\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"// request is public",
											"pm.test(\"Request is not Public\", function () {",
											"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
											"});",
											"",
											"// succes is true",
											"pm.test(\"Check success is true\", () => { ",
											"    pm.expect(pm.response.json().success).to.equal(true); ",
											"});",
											"",
											"// check keys in response",
											"var data = JSON.parse(responseBody);",
											"tests[\"Status code is 1\"] = data.status.code === 1;",
											"tests['Response has ID'] = responseBody.has('id');",
											"tests['Response has Profile Name'] = responseBody.has('profileName');",
											"tests['Response has activeFrom'] = responseBody.has('activeFrom');",
											"tests['Response has activeTo'] = responseBody.has('activeTo');",
											"tests['Response has esim'] = responseBody.has('esim');",
											"tests['Response has i_account'] = responseBody.has('i_account');",
											"tests['Response has ICCID'] = responseBody.has('ICCID');",
											"tests['Response has IMSI'] = responseBody.has('IMSI');",
											"tests['Response has MSISDN'] = responseBody.has('MSISDN');",
											"tests['Response has ESIM_QR_CODE'] = responseBody.has('ESIM_QR_CODE');",
											"tests['Response has SM_DP_ADDRESS'] = responseBody.has('SM_DP_ADDRESS');",
											"tests['Response has ACTIVATION_CODE'] = responseBody.has('ACTIVATION_CODE');",
											"tests['Response has balance'] = responseBody.has('balance');",
											"tests['Response has total'] = responseBody.has('total');",
											"tests['Response has remaining'] = responseBody.has('remaining');",
											"tests['Response has used'] = responseBody.has('used');",
											"tests['Response has unit'] = responseBody.has('unit');",
											"tests['Response has serviceName'] = responseBody.has('serviceName');",
											"tests['Response has packageName'] = responseBody.has('packageName');",
											"",
											"profileID = pm.environment.get(\"profile_id\");",
											"profileName = pm.environment.get(\"checkProfileName\");",
											"tests['ID is equal to ID of created profile'] = data.data.id === profileID;",
											"tests['Profile name is equal to profile name of created profile'] = data.data.profileName === profileName;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/esim/balance/:id",
									"host": [
										"{{host}}"
									],
									"path": [
										"esim",
										"balance",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{profile_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit eSIM profile name by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// status ok, format is JSON",
											"pm.test(\"Status is ok, response is json\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"// request is public",
											"pm.test(\"Request is not Public\", function () {",
											"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
											"});",
											"",
											"// succes is true",
											"pm.test(\"Check success is true\", () => { ",
											"    pm.expect(pm.response.json().success).to.equal(true); ",
											"});",
											"",
											"// check keys in response",
											"var data = JSON.parse(responseBody);",
											"tests[\"Status code is 1\"] = data.status.code === 1;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"profileName\": \"{{patchProfileName}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/esim/edit/:id",
									"host": [
										"{{host}}"
									],
									"path": [
										"esim",
										"edit",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{profile_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete eSIM profile by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// status ok, format is JSON",
											"pm.test(\"Status is ok, response is json\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"// request is public",
											"pm.test(\"Request is not Public\", function () {",
											"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
											"});",
											"",
											"// succes is true",
											"pm.test(\"Check success is true\", () => { ",
											"    pm.expect(pm.response.json().success).to.equal(true); ",
											"});",
											"",
											"// check keys in response",
											"var data = JSON.parse(responseBody);",
											"tests[\"Status code is 1\"] = data.status.code === 1;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/esim/profile/:id",
									"host": [
										"{{host}}"
									],
									"path": [
										"esim",
										"profile",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{profile_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get package history",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// status ok, format is JSON",
											"pm.test(\"Status is ok, response is json\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"// request is public",
											"pm.test(\"Request is not Public\", function () {",
											"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
											"});",
											"",
											"// succes is true",
											"pm.test(\"Check success is true\", () => { ",
											"    pm.expect(pm.response.json().success).to.equal(true); ",
											"});",
											"",
											"// check keys in response",
											"var data = JSON.parse(responseBody);",
											"tests[\"Status code is 1\"] = data.status.code === 1;",
											"tests['Response has history'] = responseBody.has('history');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/esim/package-history/64",
									"host": [
										"{{host}}"
									],
									"path": [
										"esim",
										"package-history",
										"64"
									]
								}
							},
							"response": []
						},
						{
							"name": "Activate empty esim",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MywiYWNjZXNzSW1hZ2UiOiJkNGZhMTI5Yy1lNmVmLTRjYTItYTMzNC1iODViY2QwMmQ1NDUiLCJyb2xlSWQiOjEsImlhdCI6MTYxNTI4Mjk5MiwiZXhwIjoxNjE1Mjg2NTkyfQ.JuLUigY10_Z4M9c0iKHEdrdW8rRepfblBHKvytZT18I"
									}
								],
								"url": {
									"raw": "{{host}}/esim/activate-empty-esims",
									"host": [
										"{{host}}"
									],
									"path": [
										"esim",
										"activate-empty-esims"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "About us",
					"item": [
						{
							"name": "Supported devices - Brands",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// status ok, format is JSON",
											"pm.test(\"Status is ok, response is json\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"// request is public",
											"pm.test(\"Request is Public\", function () {",
											"    pm.expect(pm.request.to.not.have.header(\"Authorization\"));",
											"});",
											"",
											"// succes is true",
											"pm.test(\"Check success is true\", () => { ",
											"    pm.expect(pm.response.json().success).to.equal(true); ",
											"});",
											"",
											"// check keys in response",
											"var data = JSON.parse(responseBody);",
											"tests[\"Status code is 1\"] = data.status.code === 1;",
											"tests['Response has Brands'] = responseBody.has('brands');",
											"tests['Response has id'] = responseBody.has('id');",
											"tests['Response has title'] = responseBody.has('title');",
											"tests['Response has total'] = responseBody.has('total');",
											"",
											"// save country ID",
											"const { code } = pm.response",
											"if (code === 200) {",
											"    const { data: { brands: [{ id }]}} = pm.response.json();",
											"    pm.environment.set(\"brand_id\", id);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://telesim.dunice-testing.com/api/v1/supported-devices/brands",
									"protocol": "https",
									"host": [
										"telesim",
										"dunice-testing",
										"com"
									],
									"path": [
										"api",
										"v1",
										"supported-devices",
										"brands"
									]
								}
							},
							"response": []
						},
						{
							"name": "Supported devices - Brands - ID devices",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// status ok, format is JSON",
											"pm.test(\"Status is ok, response is json\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"// request is public",
											"pm.test(\"Request is Public\", function () {",
											"    pm.expect(pm.request.to.not.have.header(\"Authorization\"));",
											"});",
											"",
											"// succes is true",
											"pm.test(\"Check success is true\", () => { ",
											"    pm.expect(pm.response.json().success).to.equal(true); ",
											"});",
											"",
											"// check keys in response",
											"var data = JSON.parse(responseBody);",
											"tests[\"Status code is 1\"] = data.status.code === 1;",
											"tests['Response has Devices'] = responseBody.has('devices');",
											"tests['Response has id'] = responseBody.has('id');",
											"tests['Response has title'] = responseBody.has('title');",
											"tests['Response has icon'] = responseBody.has('icon');",
											"tests['Response has total'] = responseBody.has('total');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://telesim.dunice-testing.com/api/v1/supported-devices/brand-devices/{{brand_id}}",
									"protocol": "https",
									"host": [
										"telesim",
										"dunice-testing",
										"com"
									],
									"path": [
										"api",
										"v1",
										"supported-devices",
										"brand-devices",
										"{{brand_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "All brands and devices",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// status ok, format is JSON",
											"pm.test(\"Status is ok, response is json\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"// request is public",
											"pm.test(\"Request is Public\", function () {",
											"    pm.expect(pm.request.to.not.have.header(\"Authorization\"));",
											"});",
											"",
											"// succes is true",
											"pm.test(\"Check success is true\", () => { ",
											"    pm.expect(pm.response.json().success).to.equal(true); ",
											"});",
											"",
											"// check keys in response",
											"var data = JSON.parse(responseBody);",
											"tests[\"Status code is 1\"] = data.status.code === 1;",
											"tests['Response has id'] = responseBody.has('id');",
											"tests['Response has title'] = responseBody.has('title');",
											"tests['Response has devices'] = responseBody.has('devices');",
											"tests['Response has icon'] = responseBody.has('icon');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://telesim.dunice-testing.com/api/v1/supported-devices/brands-devices",
									"protocol": "https",
									"host": [
										"telesim",
										"dunice-testing",
										"com"
									],
									"path": [
										"api",
										"v1",
										"supported-devices",
										"brands-devices"
									]
								}
							},
							"response": []
						},
						{
							"name": "FAQ - Categories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// status ok, format is JSON",
											"pm.test(\"Status is ok, response is json\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"// request is public",
											"pm.test(\"Request is Public\", function () {",
											"    pm.expect(pm.request.to.not.have.header(\"Authorization\"));",
											"});",
											"",
											"// succes is true",
											"pm.test(\"Check success is true\", () => { ",
											"    pm.expect(pm.response.json().success).to.equal(true); ",
											"});",
											"",
											"// check keys in response",
											"var data = JSON.parse(responseBody);",
											"tests[\"Status code is 1\"] = data.status.code === 1;",
											"tests['Response has categories'] = responseBody.has('categories');",
											"tests['Response has id'] = responseBody.has('id');",
											"tests['Response has icon'] = responseBody.has('icon');",
											"tests['Response has title'] = responseBody.has('title');",
											"tests['Response has total'] = responseBody.has('total');",
											"",
											"// save country ID",
											"const { code } = pm.response",
											"if (code === 200) {",
											"    const { data: { categories: [{ id }]}} = pm.response.json();",
											"    pm.environment.set(\"category_id\", id);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://telesim.dunice-testing.com/api/v1/faq/categories",
									"protocol": "https",
									"host": [
										"telesim",
										"dunice-testing",
										"com"
									],
									"path": [
										"api",
										"v1",
										"faq",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "FAQ - Categories - ID Questions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// status ok, format is JSON",
											"pm.test(\"Status is ok, response is json\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"// request is public",
											"pm.test(\"Request is Public\", function () {",
											"    pm.expect(pm.request.to.not.have.header(\"Authorization\"));",
											"});",
											"",
											"// succes is true",
											"pm.test(\"Check success is true\", () => { ",
											"    pm.expect(pm.response.json().success).to.equal(true); ",
											"});",
											"",
											"// check keys in response",
											"var data = JSON.parse(responseBody);",
											"tests[\"Status code is 1\"] = data.status.code === 1;",
											"tests['Response has questions'] = responseBody.has('questions');",
											"tests['Response has id'] = responseBody.has('id');",
											"tests['Response has title'] = responseBody.has('title');",
											"tests['Response has description'] = responseBody.has('description');",
											"tests['Response has total'] = responseBody.has('total');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://telesim.dunice-testing.com/api/v1/faq/category-questions/{{category_id}}",
									"protocol": "https",
									"host": [
										"telesim",
										"dunice-testing",
										"com"
									],
									"path": [
										"api",
										"v1",
										"faq",
										"category-questions",
										"{{category_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "All categories and questions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// status ok, format is JSON",
											"pm.test(\"Status is ok, response is json\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"// request is public",
											"pm.test(\"Request is Public\", function () {",
											"    pm.expect(pm.request.to.not.have.header(\"Authorization\"));",
											"});",
											"",
											"// succes is true",
											"pm.test(\"Check success is true\", () => { ",
											"    pm.expect(pm.response.json().success).to.equal(true); ",
											"});",
											"",
											"// check keys in response",
											"var data = JSON.parse(responseBody);",
											"tests[\"Status code is 1\"] = data.status.code === 1;",
											"tests['Response has id'] = responseBody.has('id');",
											"tests['Response has icon'] = responseBody.has('icon');",
											"tests['Response has title'] = responseBody.has('title');",
											"tests['Response has questions'] = responseBody.has('questions');",
											"tests['Response has description'] = responseBody.has('description');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://telesim.dunice-testing.com/api/v1/faq/category-devices",
									"protocol": "https",
									"host": [
										"telesim",
										"dunice-testing",
										"com"
									],
									"path": [
										"api",
										"v1",
										"faq",
										"category-devices"
									]
								}
							},
							"response": []
						},
						{
							"name": "About us",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// status ok, format is JSON",
											"pm.test(\"Status is ok, response is json\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"// request is public",
											"pm.test(\"Request is Public\", function () {",
											"    pm.expect(pm.request.to.not.have.header(\"Authorization\"));",
											"});",
											"",
											"// succes is true",
											"pm.test(\"Check success is true\", () => { ",
											"    pm.expect(pm.response.json().success).to.equal(true); ",
											"});",
											"",
											"// check keys in response",
											"var data = JSON.parse(responseBody);",
											"tests[\"Status code is 1\"] = data.status.code === 1;",
											"tests['Response has id'] = responseBody.has('id');",
											"tests['Response has title'] = responseBody.has('title');",
											"tests['Response has description'] = responseBody.has('description');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://telesim.dunice-testing.com/api/v1/about",
									"protocol": "https",
									"host": [
										"telesim",
										"dunice-testing",
										"com"
									],
									"path": [
										"api",
										"v1",
										"about"
									]
								}
							},
							"response": []
						},
						{
							"name": "Legal",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// status ok, format is JSON",
											"pm.test(\"Status is ok, response is json\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"// request is public",
											"pm.test(\"Request is Public\", function () {",
											"    pm.expect(pm.request.to.not.have.header(\"Authorization\"));",
											"});",
											"",
											"// succes is true",
											"pm.test(\"Check success is true\", () => { ",
											"    pm.expect(pm.response.json().success).to.equal(true); ",
											"});",
											"",
											"// check keys in response",
											"var data = JSON.parse(responseBody);",
											"tests[\"Status code is 1\"] = data.status.code === 1;",
											"tests['Response has id'] = responseBody.has('id');",
											"tests['Response has title'] = responseBody.has('title');",
											"tests['Response has description'] = responseBody.has('description');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://telesim.dunice-testing.com/api/v1/legal",
									"protocol": "https",
									"host": [
										"telesim",
										"dunice-testing",
										"com"
									],
									"path": [
										"api",
										"v1",
										"legal"
									]
								}
							},
							"response": []
						},
						{
							"name": "Contacts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// status ok, format is JSON",
											"pm.test(\"Status is ok, response is json\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"// request is public",
											"pm.test(\"Request is Public\", function () {",
											"    pm.expect(pm.request.to.not.have.header(\"Authorization\"));",
											"});",
											"",
											"// succes is true",
											"pm.test(\"Check success is true\", () => { ",
											"    pm.expect(pm.response.json().success).to.equal(true); ",
											"});",
											"",
											"// check keys in response",
											"var data = JSON.parse(responseBody);",
											"tests[\"Status code is 1\"] = data.status.code === 1;",
											"tests['Response has id'] = responseBody.has('id');",
											"tests['Response has type'] = responseBody.has('type');",
											"tests['Response has value'] = responseBody.has('value');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://telesim.dunice-testing.com/api/v1/about-app-contacts",
									"protocol": "https",
									"host": [
										"telesim",
										"dunice-testing",
										"com"
									],
									"path": [
										"api",
										"v1",
										"about-app-contacts"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Clear/edit created datas",
			"item": [
				{
					"name": "Edit country",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// add new name and isoCode to variables",
									"const { name, isoCode } = JSON.parse(pm.request.body.raw);",
									"pm.environment.set(\"saveNewLocationCountryName\", name);",
									"pm.environment.set(\"saveNewCountryIsoCode\", isoCode);",
									"",
									"// status ok, format is JSON",
									"pm.test(\"Status is ok, response is json\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// request is public",
									"pm.test(\"Request is not Public\", function () {",
									"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
									"});",
									"",
									"// succes is true",
									"pm.test(\"Check success is true\", () => { ",
									"    pm.expect(pm.response.json().success).to.equal(true); ",
									"});",
									"",
									"// check keys in response",
									"var data = JSON.parse(responseBody);",
									"tests[\"Status code is 1\"] = data.status?.code === 1;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiYWNjZXNzSW1hZ2UiOiIyZmJlNmM5YS00ZGFiLTQyOTItODU5OS0yY2Q4YjgwODAyNTYiLCJyb2xlSWQiOjEsImlhdCI6MTYxNTk2Nzg3NCwiZXhwIjoxNjE1OTcxNDc0fQ.GrIWYP9rW45uMkNpJc0wTXjnp2NZ3t6wYaciYXZqnoI"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"name\":\"{{locationCountryName}}\",\"isoCode\":\"{{CountryIsoCode}}\"}"
						},
						"url": {
							"raw": "{{host}}/locations/edit-country/{{newCountryId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"locations",
								"edit-country",
								"{{newCountryId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Country check changes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status ok, format is JSON",
									"pm.test(\"Status is ok, response is json\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// request is public",
									"pm.test(\"Request is not Public\", function () {",
									"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
									"});",
									"",
									"// check values",
									"var data = JSON.parse(responseBody);",
									"countryName = pm.environment.get(\"saveNewLocationCountryName\");",
									"isoCode = pm.environment.get(\"saveNewCountryIsoCode\");",
									"searchNewCountry = pm.environment.get(\"saveNewLocationCountryName\");",
									"const countryObject = data.results.find(({ name }) => name === searchNewCountry);",
									"",
									"tests[\"Country name is patched\"] = countryObject.name === countryName;",
									"tests[\"isoCode is patched\"] = countryObject.isoCode === isoCode;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiYWNjZXNzSW1hZ2UiOiIyZmJlNmM5YS00ZGFiLTQyOTItODU5OS0yY2Q4YjgwODAyNTYiLCJyb2xlSWQiOjEsImlhdCI6MTYxNTk2Nzg3NCwiZXhwIjoxNjE1OTcxNDc0fQ.GrIWYP9rW45uMkNpJc0wTXjnp2NZ3t6wYaciYXZqnoI"
							}
						],
						"url": {
							"raw": "{{host}}/locations/countries?perPage=1000",
							"host": [
								"{{host}}"
							],
							"path": [
								"locations",
								"countries"
							],
							"query": [
								{
									"key": "perPage",
									"value": "1000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit region",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// add new name to variables",
									"const { name, isoCode } = JSON.parse(pm.request.body.raw);",
									"pm.environment.set(\"saveNewLocationRegionName\", name);",
									"",
									"// status ok, format is JSON",
									"pm.test(\"Status is ok, response is json\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// request is public",
									"pm.test(\"Request is not Public\", function () {",
									"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
									"});",
									"",
									"// succes is true",
									"pm.test(\"Check success is true\", () => { ",
									"    pm.expect(pm.response.json().success).to.equal(true); ",
									"});",
									"",
									"// check keys in response",
									"var data = JSON.parse(responseBody);",
									"tests[\"Status code is 1\"] = data.status?.code === 1;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiYWNjZXNzSW1hZ2UiOiIyZmJlNmM5YS00ZGFiLTQyOTItODU5OS0yY2Q4YjgwODAyNTYiLCJyb2xlSWQiOjEsImlhdCI6MTYxNTk2Nzg3NCwiZXhwIjoxNjE1OTcxNDc0fQ.GrIWYP9rW45uMkNpJc0wTXjnp2NZ3t6wYaciYXZqnoI"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"name\":\"{{randomLocationRegionName}}\"}"
						},
						"url": {
							"raw": "{{host}}/locations/edit-region/{{newRegionId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"locations",
								"edit-region",
								"{{newRegionId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Region check changes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status ok, format is JSON",
									"pm.test(\"Status is ok, response is json\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// request is public",
									"pm.test(\"Request is not Public\", function () {",
									"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
									"});",
									"",
									"// check values",
									"var data = JSON.parse(responseBody);",
									"regionName = pm.environment.get(\"saveNewLocationRegionName\");",
									"searchNewRegion = pm.environment.get(\"saveNewLocationRegionName\");",
									"const regionObject = data.results.find(({ name }) => name === searchNewRegion);",
									"console.log(regionObject);",
									"tests[\"Region name is patched\"] = regionObject.name === regionName;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiYWNjZXNzSW1hZ2UiOiIyZmJlNmM5YS00ZGFiLTQyOTItODU5OS0yY2Q4YjgwODAyNTYiLCJyb2xlSWQiOjEsImlhdCI6MTYxNTk2Nzg3NCwiZXhwIjoxNjE1OTcxNDc0fQ.GrIWYP9rW45uMkNpJc0wTXjnp2NZ3t6wYaciYXZqnoI"
							}
						],
						"url": {
							"raw": "{{host}}/locations/regions?perPage=1000",
							"host": [
								"{{host}}"
							],
							"path": [
								"locations",
								"regions"
							],
							"query": [
								{
									"key": "perPage",
									"value": "1000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit subregion",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// add new name to variables",
									"const { name, isoCode } = JSON.parse(pm.request.body.raw);",
									"pm.environment.set(\"saveNewLocationSubregionName\", name);",
									"",
									"// status ok, format is JSON",
									"pm.test(\"Status is ok, response is json\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// request is public",
									"pm.test(\"Request is not Public\", function () {",
									"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
									"});",
									"",
									"// succes is true",
									"pm.test(\"Check success is true\", () => { ",
									"    pm.expect(pm.response.json().success).to.equal(true); ",
									"});",
									"",
									"// check keys in response",
									"var data = JSON.parse(responseBody);",
									"tests[\"Status code is 1\"] = data.status?.code === 1;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiYWNjZXNzSW1hZ2UiOiIyZmJlNmM5YS00ZGFiLTQyOTItODU5OS0yY2Q4YjgwODAyNTYiLCJyb2xlSWQiOjEsImlhdCI6MTYxNTk2Nzg3NCwiZXhwIjoxNjE1OTcxNDc0fQ.GrIWYP9rW45uMkNpJc0wTXjnp2NZ3t6wYaciYXZqnoI"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"name\":\"{{randomLocationSubregionName}}\"}"
						},
						"url": {
							"raw": "{{host}}/locations/edit-subregion/{{newSubregionId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"locations",
								"edit-subregion",
								"{{newSubregionId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Subregion check changes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status ok, format is JSON",
									"pm.test(\"Status is ok, response is json\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// request is public",
									"pm.test(\"Request is not Public\", function () {",
									"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
									"});",
									"",
									"// check values",
									"var data = JSON.parse(responseBody);",
									"subregionName = pm.environment.get(\"saveNewLocationSubregionName\");",
									"searchNewSubregion = pm.environment.get(\"saveNewLocationSubregionName\");",
									"const subregionObject = data.results.find(({ name }) => name === searchNewSubregion);",
									"",
									"tests[\"Subregion name is patched\"] = subregionObject.name === subregionName;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiYWNjZXNzSW1hZ2UiOiIyZmJlNmM5YS00ZGFiLTQyOTItODU5OS0yY2Q4YjgwODAyNTYiLCJyb2xlSWQiOjEsImlhdCI6MTYxNTk2Nzg3NCwiZXhwIjoxNjE1OTcxNDc0fQ.GrIWYP9rW45uMkNpJc0wTXjnp2NZ3t6wYaciYXZqnoI"
							}
						],
						"url": {
							"raw": "{{host}}/locations/subregions?perPage=1000",
							"host": [
								"{{host}}"
							],
							"path": [
								"locations",
								"subregions"
							],
							"query": [
								{
									"key": "perPage",
									"value": "1000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete eSIM zone",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status ok, format is JSON",
									"pm.test(\"Status is ok, response is json\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// request is public",
									"pm.test(\"Request is not Public\", function () {",
									"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
									"});",
									"",
									"// succes is true",
									"pm.test(\"Check success is true\", () => { ",
									"    pm.expect(pm.response.json().success).to.equal(true); ",
									"});",
									"",
									"// check keys in response",
									"var data = JSON.parse(responseBody);",
									"tests[\"Status code is 1\"] = data.status.code === 1;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiYWNjZXNzSW1hZ2UiOiI1NTJjYjVhOC0xOTgyLTRjODItOTJkYi0xMTg5MmIyNTk0YjkiLCJyb2xlSWQiOjEsImlhdCI6MTYxNTUzMjQ1MSwiZXhwIjoxNjE1NTM2MDUxfQ.VR1-WXxZu0uZd7bH5pOOzjgJ_nHlH9Zga_mtaHmi0Ns"
							}
						],
						"url": {
							"raw": "{{host}}/esim-directory/esim-zones/{{idOfNewZone}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"esim-directory",
								"esim-zones",
								"{{idOfNewZone}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete country package",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status ok, format is JSON",
									"pm.test(\"Status is ok, response is json\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// request is public",
									"pm.test(\"Request is not Public\", function () {",
									"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
									"});",
									"",
									"// check keys in response",
									"var data = JSON.parse(responseBody);",
									"tests['Response has 1'] = responseBody.has(1);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{host}}/packages-esim/country/package/{{savePackageId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"packages-esim",
								"country",
								"package",
								"{{savePackageId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete country",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status ok, format is JSON",
									"pm.test(\"Status is ok, response is json\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// request is public",
									"pm.test(\"Request is not Public\", function () {",
									"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
									"});",
									"",
									"// succes is true",
									"pm.test(\"Check success is true\", () => { ",
									"    pm.expect(pm.response.json().success).to.equal(true); ",
									"});",
									"",
									"// check keys in response",
									"var data = JSON.parse(responseBody);",
									"tests[\"Status code is 1\"] = data.status.code === 1;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiYWNjZXNzSW1hZ2UiOiIyZmJlNmM5YS00ZGFiLTQyOTItODU5OS0yY2Q4YjgwODAyNTYiLCJyb2xlSWQiOjEsImlhdCI6MTYxNTk2Nzg3NCwiZXhwIjoxNjE1OTcxNDc0fQ.GrIWYP9rW45uMkNpJc0wTXjnp2NZ3t6wYaciYXZqnoI"
							}
						],
						"url": {
							"raw": "{{host}}/locations/remove/country/{{newCountryId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"locations",
								"remove",
								"country",
								"{{newCountryId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete region package",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status ok, format is JSON",
									"pm.test(\"Status is ok, response is json\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// request is public",
									"pm.test(\"Request is not Public\", function () {",
									"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
									"});",
									"",
									"// check keys in response",
									"var data = JSON.parse(responseBody);",
									"tests['Response has 1'] = responseBody.has(1);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{host}}/packages-esim/country/package/{{saveRegionPackageId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"packages-esim",
								"country",
								"package",
								"{{saveRegionPackageId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete region",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status ok, format is JSON",
									"pm.test(\"Status is ok, response is json\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// request is public",
									"pm.test(\"Request is not Public\", function () {",
									"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
									"});",
									"",
									"// succes is true",
									"pm.test(\"Check success is true\", () => { ",
									"    pm.expect(pm.response.json().success).to.equal(true); ",
									"});",
									"",
									"// check keys in response",
									"var data = JSON.parse(responseBody);",
									"tests[\"Status code is 1\"] = data.status.code === 1;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiYWNjZXNzSW1hZ2UiOiIyZmJlNmM5YS00ZGFiLTQyOTItODU5OS0yY2Q4YjgwODAyNTYiLCJyb2xlSWQiOjEsImlhdCI6MTYxNTk2Nzg3NCwiZXhwIjoxNjE1OTcxNDc0fQ.GrIWYP9rW45uMkNpJc0wTXjnp2NZ3t6wYaciYXZqnoI"
							}
						],
						"url": {
							"raw": "{{host}}/locations/remove/region/{{newRegionId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"locations",
								"remove",
								"region",
								"{{newRegionId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete subregion package",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status ok, format is JSON",
									"pm.test(\"Status is ok, response is json\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// request is public",
									"pm.test(\"Request is not Public\", function () {",
									"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
									"});",
									"",
									"// check keys in response",
									"var data = JSON.parse(responseBody);",
									"tests['Response has 1'] = responseBody.has(1);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{host}}/packages-esim/country/package/{{saveSubregionPackageId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"packages-esim",
								"country",
								"package",
								"{{saveSubregionPackageId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete subregion",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status ok, format is JSON",
									"pm.test(\"Status is ok, response is json\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// request is public",
									"pm.test(\"Request is not Public\", function () {",
									"    pm.expect(pm.request.to.have.header(\"Authorization\"));",
									"});",
									"",
									"// succes is true",
									"pm.test(\"Check success is true\", () => { ",
									"    pm.expect(pm.response.json().success).to.equal(true); ",
									"});",
									"",
									"// check keys in response",
									"var data = JSON.parse(responseBody);",
									"tests[\"Status code is 1\"] = data.status.code === 1;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiYWNjZXNzSW1hZ2UiOiIyZmJlNmM5YS00ZGFiLTQyOTItODU5OS0yY2Q4YjgwODAyNTYiLCJyb2xlSWQiOjEsImlhdCI6MTYxNTk2Nzg3NCwiZXhwIjoxNjE1OTcxNDc0fQ.GrIWYP9rW45uMkNpJc0wTXjnp2NZ3t6wYaciYXZqnoI"
							}
						],
						"url": {
							"raw": "{{host}}/locations/remove/subregion/{{newSubregionId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"locations",
								"remove",
								"subregion",
								"{{newSubregionId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const token = pm.collectionVariables.get(\"token\");",
					"// if token is empty - send login request",
					"if (!token) {",
					"    const { auth } = pm.request",
					"    if (!auth || auth && auth.type !== 'noauth') {",
					"        const host = pm.collectionVariables.get(\"host\");",
					"        const email = pm.collectionVariables.get(\"email\");",
					"        const password = pm.collectionVariables.get(\"password\");",
					"",
					"        // sending login request with email and password from last login",
					"        pm.sendRequest({",
					"            url: `${host}/auth/login`,",
					"            method: 'POST',",
					"            header: {",
					"                \"content-type\": \"application/json\",",
					"                \"accept\": \"application/json\",",
					"            },",
					"            body: {",
					"                mode: 'raw',",
					"                raw: JSON.stringify({",
					"                    email,",
					"                    password,",
					"                    client: 'web',",
					"                    device: 'Postman'",
					"                    })",
					"            }",
					"        }, function (err, res) {",
					"            if (err) {",
					"                console.log(res);",
					"                return;",
					"            }",
					"            const response = res.json();",
					"            const status = response.code;",
					"            console.log(status)",
					"            if (response && (status >= 400)) {",
					"                console.log(response);",
					"                return",
					"            }",
					"            console.log(response)",
					"            const { data: { token, refreshToken }} = response;",
					"            pm.collectionVariables.set(\"token\", token);",
					"            pm.collectionVariables.set(\"refresh\", refreshToken);",
					"        });",
					"    }",
					"}",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const errors = {",
					"    \"3\": \"Allow\",",
					"    \"4\": \"IsDefined\",",
					"    \"5\": \"IsOptional\",",
					"    \"6\": \"Validate\",",
					"    \"7\": \"ValidateBy\",",
					"    \"8\": \"ValidateIf\",",
					"    \"9\": \"ValidateNested\",",
					"    \"10\": \"ValidatePromise\",",
					"    \"11\": \"IsLatLong\",",
					"    \"12\": \"IsLatitude\",",
					"    \"13\": \"IsLongitude\",",
					"    \"14\": \"Equals\",",
					"    \"15\": \"NotEquals\",",
					"    \"16\": \"IsEmpty\",",
					"    \"17\": \"IsNotEmpty\",",
					"    \"18\": \"IsIn\",",
					"    \"19\": \"IsNotIn\",",
					"    \"20\": \"IsDivisibleBy\",",
					"    \"21\": \"IsPositive\",",
					"    \"22\": \"IsNegative\",",
					"    \"23\": \"Max\",",
					"    \"24\": \"Min\",",
					"    \"25\": \"MinDate\",",
					"    \"26\": \"MaxDate\",",
					"    \"27\": \"Contains\",",
					"    \"28\": \"NotContains\",",
					"    \"29\": \"IsAlpha\",",
					"    \"30\": \"IsAlphanumeric\",",
					"    \"31\": \"IsDecimal\",",
					"    \"32\": \"IsAscii\",",
					"    \"33\": \"IsBase64\",",
					"    \"34\": \"IsByteLength\",",
					"    \"35\": \"IsCreditCard\",",
					"    \"36\": \"IsCurrency\",",
					"    \"37\": \"IsEmail\",",
					"    \"38\": \"IsFQDN\",",
					"    \"39\": \"IsFullWidth\",",
					"    \"40\": \"IsHalfWidth\",",
					"    \"41\": \"IsVariableWidth\",",
					"    \"42\": \"IsHexColor\",",
					"    \"43\": \"IsHexadecimal\",",
					"    \"44\": \"IsMacAddress\",",
					"    \"45\": \"IsIP\",",
					"    \"46\": \"IsPort\",",
					"    \"47\": \"IsISBN\",",
					"    \"48\": \"IsISIN\",",
					"    \"49\": \"IsISO8601\",",
					"    \"50\": \"IsJSON\",",
					"    \"51\": \"IsJWT\",",
					"    \"52\": \"IsLowercase\",",
					"    \"53\": \"IsMobilePhone\",",
					"    \"54\": \"IsISO31661Alpha2\",",
					"    \"55\": \"IsISO31661Alpha3\",",
					"    \"56\": \"IsMongoId\",",
					"    \"57\": \"IsMultibyte\",",
					"    \"58\": \"IsSurrogatePair\",",
					"    \"59\": \"IsUrl\",",
					"    \"60\": \"IsUUID\",",
					"    \"61\": \"IsFirebasePushId\",",
					"    \"62\": \"IsUppercase\",",
					"    \"63\": \"Length\",",
					"    \"64\": \"MaxLength\",",
					"    \"65\": \"MinLength\",",
					"    \"66\": \"Matches\",",
					"    \"67\": \"IsPhoneNumber\",",
					"    \"68\": \"IsMilitaryTime\",",
					"    \"69\": \"IsHash\",",
					"    \"70\": \"IsISSN\",",
					"    \"71\": \"IsDateString\",",
					"    \"72\": \"IsBooleanString\",",
					"    \"73\": \"IsNumberString\",",
					"    \"74\": \"IsBase32\",",
					"    \"75\": \"IsBIC\",",
					"    \"76\": \"IsBtcAddress\",",
					"    \"77\": \"IsDataURI\",",
					"    \"78\": \"IsEAN\",",
					"    \"79\": \"IsEthereumAddress\",",
					"    \"80\": \"IsHSL\",",
					"    \"81\": \"IsIBAN\",",
					"    \"82\": \"IsIdentityCard\",",
					"    \"83\": \"IsISRC\",",
					"    \"84\": \"IsLocale\",",
					"    \"85\": \"IsMagnetURI\",",
					"    \"86\": \"IsMimeType\",",
					"    \"87\": \"IsOctal\",",
					"    \"88\": \"IsPassportNumber\",",
					"    \"89\": \"IsPostalCode\",",
					"    \"90\": \"IsRFC3339\",",
					"    \"91\": \"IsRgbColor\",",
					"    \"92\": \"IsSemVer\",",
					"    \"93\": \"IsBoolean\",",
					"    \"94\": \"IsDate\",",
					"    \"95\": \"IsNumber\",",
					"    \"96\": \"IsEnum\",",
					"    \"97\": \"IsInt\",",
					"    \"98\": \"IsString\",",
					"    \"99\": \"IsArray\",",
					"    \"100\": \"IsObject\",",
					"    \"101\": \"ArrayContains\",",
					"    \"102\": \"ArrayNotContains\",",
					"    \"103\": \"ArrayNotEmpty\",",
					"    \"104\": \"ArrayMinSize\",",
					"    \"105\": \"ArrayMaxSize\",",
					"    \"106\": \"ArrayUnique\",",
					"    \"107\": \"IsNotEmptyObject\",",
					"    \"108\": \"IsInstance\",",
					"    \"109\": \"IsPassword\",",
					"    \"110\": \"IsUserID\",",
					"    \"111\": \"IsTableID\",",
					"    \"112\": \"IsStateID\",",
					"    \"113\": \"IsPackagePriceID\",",
					"    \"114\": \"IsPackageID\",",
					"    \"115\": \"IsCountryID\",",
					"    \"116\": \"UserNotFound\",",
					"    \"117\": \"CredentialsNotValid\",",
					"    \"188\": \"AccountBlocked\",",
					"    \"189\": \"LoginError\",",
					"    \"190\": \"IsAlreadyExist\",",
					"    \"191\": \"DataIsNotFound\",",
					"    \"192\": \"WrongToken\",",
					"    \"193\": \"InsufficientMinutes\",",
					"    \"194\": \"InvalidData\",",
					"    \"195\": \"OperationFailed\",",
					"    \"196\": \"DataIsNotAvailable\",",
					"    \"197\": \"InsufficientBalance\",",
					"    \"198\": \"StripeWebhookError\",",
					"    \"199\": \"AwsError\",",
					"    \"201\": \"EsimError\",",
					"    \"202\": \"MultitelError\",",
					"    \"203\": \"ActionIsNotSupported\",",
					"    \"204\": \"NotEnoughPermissions\",",
					"    \"205\": \"Timeount60Sec\",",
					"    \"206\": \"MailIsAlreadyExist\",",
					"    \"207\": \"TimeoutExpired\",",
					"    \"208\": \"Unauthorized\",",
					"};",
					"",
					"const response = pm.response;",
					"if (response && (response.code === 400)) {",
					"    const data = response.json();",
					"    if (data.statusCode >= 0) {",
					"        const { statusCode } = data;",
					"        if (statusCode === 208) {",
					"            pm.collectionVariables.set(\"token\", \"\");",
					"            pm.collectionVariables.set(\"refresh\", \"\");",
					"        } else {",
					"            if (data.errorCodes) {",
					"                console.log(`Error text codes: ${data.errorCodes.map((code) => errors[code] || 'Unexpected error!')}`)",
					"            } else if (errors[statusCode]) {",
					"                console.log(`Error text code: ${errors[statusCode]}!`)",
					"            } else {",
					"                console.log('Unexpected error!')",
					"            }",
					"        }",
					"    } else {",
					"        console.log(response.json())",
					"    }",
					"}",
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "http://localhost:3000/api/v1"
		},
		{
			"key": "token",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiYWNjZXNzSW1hZ2UiOiI4NDMyZWJkNy0xNTZlLTQwNTItODI0MS1lZWM3NjBmNGJkMGIiLCJyb2xlSWQiOjEsImlhdCI6MTYxNjE1NjY1MSwiZXhwIjoxNjE2MTYwMjUxfQ.T6ioIfBPtc9t7wZBURRVPyZB6v4f8xY76yIcUqTC-eM"
		},
		{
			"key": "refresh",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiYWNjZXNzSW1hZ2UiOiI4NDMyZWJkNy0xNTZlLTQwNTItODI0MS1lZWM3NjBmNGJkMGIiLCJyb2xlSWQiOjEsImlhdCI6MTYxNjE1NjY1MX0.jx8-4Fd8Yhfd9v0MY2QUL_bSBA5IyedsRJMBzwKCYls"
		},
		{
			"key": "email",
			"value": "user2@mail.com"
		},
		{
			"key": "password",
			"value": "QWEqwe123"
		},
		{
			"key": "adminToken",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NywiYWNjZXNzSW1hZ2UiOiJhNmJmNTlhOC04NGVlLTQ3YTQtYWU0My0zY2FjOGJjYjZiZjciLCJyb2xlSWQiOjEsImlhdCI6MTYxMzY0NTczMywiZXhwIjoxNjEzNjQ5MzMzfQ.wdwHaRUnwxNUlf8gMVIEMi-DBEQVihgKRZEiITmtZ5g"
		},
		{
			"key": "passToken",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTAsImNvZGUiOiI3NDkxMzUiLCJpYXQiOjE2MDczNDQ5MzksImV4cCI6MTYwNzM0NTgzOX0.uTATKxtIAEUYNOkmqfwv3DMJHdEvFkRrfnELghZL0yQ"
		},
		{
			"key": "stage",
			"value": "https://telesim.dunice-testing.com/api/v1"
		}
	]
}